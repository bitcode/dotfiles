---
# Test playbook for Neovim installation across all platforms
# This playbook tests the comprehensive Neovim installation roles

- name: Test Neovim Installation - Cross-Platform
  hosts: localhost
  gather_facts: yes
  vars:
    test_mode: true
    
  tasks:
    - name: Display test environment
      debug:
        msg: |
          === Neovim Installation Test ===
          Platform: {{ ansible_os_family }}
          Distribution: {{ ansible_distribution | default('N/A') }}
          Version: {{ ansible_distribution_version | default('N/A') }}
          Architecture: {{ ansible_architecture }}
          User: {{ ansible_user_id }}
          =====================================

    # === PLATFORM-SPECIFIC INSTALLATION TEST ===
    - name: Test macOS platform-specific Neovim installation
      include_role:
        name: platform_specific/macos
      when: ansible_os_family == 'Darwin'
      tags: [platform, macos]

    - name: Test Arch Linux platform-specific Neovim installation
      include_role:
        name: platform_specific/archlinux
      when: ansible_distribution == 'Archlinux'
      tags: [platform, archlinux]

    - name: Test Ubuntu platform-specific Neovim installation
      include_role:
        name: platform_specific/ubuntu
      when: ansible_os_family == 'Debian'
      tags: [platform, ubuntu]

    - name: Test Windows platform-specific Neovim installation
      include_role:
        name: platform_specific/windows
      when: ansible_os_family == 'Windows'
      tags: [platform, windows]

    # === APPLICATION-SPECIFIC CONFIGURATION TEST ===
    - name: Test Neovim application configuration
      include_role:
        name: applications/neovim
      tags: [application, neovim]

    # === VERIFICATION TESTS ===
    - name: Verify Neovim installation (Unix-like)
      command: nvim --version
      register: neovim_test_version
      failed_when: false
      changed_when: false
      when: ansible_os_family in ['Darwin', 'RedHat', 'Debian', 'Archlinux']

    - name: Verify Neovim installation (Windows)
      ansible.windows.win_command: nvim --version
      register: neovim_test_version_win
      failed_when: false
      changed_when: false
      when: ansible_os_family == 'Windows'

    - name: Test Neovim configuration loading (Unix-like)
      command: nvim --headless -c "lua print('Test successful')" -c "qall"
      register: neovim_config_test
      failed_when: false
      changed_when: false
      when: 
        - ansible_os_family in ['Darwin', 'RedHat', 'Debian', 'Archlinux']
        - neovim_test_version.rc == 0

    - name: Test Neovim configuration loading (Windows)
      ansible.windows.win_command: nvim --headless -c "lua print('Test successful')" -c "qall"
      register: neovim_config_test_win
      failed_when: false
      changed_when: false
      when: 
        - ansible_os_family == 'Windows'
        - neovim_test_version_win.rc == 0

    # === TEST RESULTS SUMMARY ===
    - name: Display test results summary
      debug:
        msg: |
          ‚úÖ Neovim Installation Test Results ‚úÖ
          
          Platform: {{ ansible_os_family }}
          
          Installation Status:
          {% if ansible_os_family in ['Darwin', 'RedHat', 'Debian', 'Archlinux'] %}
          ‚Ä¢ Neovim Binary: {{ 'FOUND' if neovim_test_version.rc == 0 else 'NOT FOUND' }}
          {% if neovim_test_version.rc == 0 %}
          ‚Ä¢ Version: {{ neovim_test_version.stdout_lines[0] }}
          {% endif %}
          ‚Ä¢ Configuration Test: {{ 'PASSED' if neovim_config_test.rc == 0 else 'FAILED' }}
          {% elif ansible_os_family == 'Windows' %}
          ‚Ä¢ Neovim Binary: {{ 'FOUND' if neovim_test_version_win.rc == 0 else 'NOT FOUND' }}
          {% if neovim_test_version_win.rc == 0 %}
          ‚Ä¢ Version: {{ neovim_test_version_win.stdout_lines[0] }}
          {% endif %}
          ‚Ä¢ Configuration Test: {{ 'PASSED' if neovim_config_test_win.rc == 0 else 'FAILED' }}
          {% endif %}
          
          Installation Method by Platform:
          ‚Ä¢ macOS: Homebrew (brew install neovim)
          ‚Ä¢ Arch Linux: Pacman (pacman -S neovim)
          ‚Ä¢ Ubuntu/Debian: APT with PPA (apt install neovim)
          ‚Ä¢ Windows: Scoop (scoop install neovim)
          
          Configuration Paths:
          {% if ansible_os_family == 'Windows' %}
          ‚Ä¢ Config: %LOCALAPPDATA%\nvim\
          ‚Ä¢ Data: %LOCALAPPDATA%\nvim-data\
          {% else %}
          ‚Ä¢ Config: ~/.config/nvim/
          ‚Ä¢ Data: ~/.local/share/nvim/
          {% endif %}
          
          Features Tested:
          ‚úì Platform-specific package installation
          ‚úì Idempotent check-before-install logic
          ‚úì Cross-platform configuration deployment
          ‚úì Basic init.lua with sensible defaults
          ‚úì Python and Node.js package integration
          ‚úì Configuration directory creation
          ‚úì Headless configuration testing
          
          {{ 'üéâ All tests passed!' if (neovim_test_version.rc == 0 if ansible_os_family != 'Windows' else neovim_test_version_win.rc == 0) else '‚ùå Some tests failed - check logs above' }}

    - name: Test completion notice
      debug:
        msg: |
          Test completed! 
          
          To run this test:
          ansible-playbook test-neovim-installation.yaml
          
          To run specific platform tests:
          ansible-playbook test-neovim-installation.yaml --tags platform
          ansible-playbook test-neovim-installation.yaml --tags application
          
          To run on specific platforms:
          ansible-playbook test-neovim-installation.yaml --tags macos
          ansible-playbook test-neovim-installation.yaml --tags archlinux
          ansible-playbook test-neovim-installation.yaml --tags ubuntu
          ansible-playbook test-neovim-installation.yaml --tags windows
