---
# Main site playbook - Comprehensive cross-platform system configuration
# This playbook orchestrates the complete setup of workstations and servers

- name: Pre-Flight Validation and Setup
  hosts: all
  gather_facts: yes
  become: no
  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
    dotsible_version: "2.0.0"
    execution_timestamp: "{{ ansible_date_time.iso8601 }}"
    dry_run_mode: "{{ ansible_check_mode | default(false) }}"

  pre_tasks:
    - name: Display execution banner
      debug:
        msg: |
          ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
          ‚ïë                    DOTSIBLE v{{ dotsible_version }}                        ‚ïë
          ‚ïë              Cross-Platform Configuration Management          ‚ïë
          ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

          üñ•Ô∏è  Host: {{ inventory_hostname }}
          üêß  OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          üèóÔ∏è  Architecture: {{ ansible_architecture }}
          üë§  Profile: {{ profile | default('minimal') }}
          üêç  Python: {{ ansible_python_version }}
          ‚è∞  Timestamp: {{ execution_timestamp }}
          üß™  Dry Run: {{ dry_run_mode }}

          {{ 'üîç DRY RUN MODE - No changes will be made' if dry_run_mode else 'üöÄ LIVE EXECUTION - Changes will be applied' }}
      tags: ['always']

    - name: Validate system requirements
      block:
        - name: Check Python version compatibility
          assert:
            that:
              - ansible_python_version is version('3.8', '>=')
            fail_msg: |
              Python version {{ ansible_python_version }} is not supported.
              Minimum required version: 3.8
              Target version: {{ python_version_management.target_version }}
              Python will be upgraded automatically in the next step.
            success_msg: "Python version {{ ansible_python_version }} is compatible"

        - name: Check available disk space
          assert:
            that:
              - ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='size_available') | first > 1073741824
            fail_msg: |
              Insufficient disk space available.
              At least 1GB of free space is required.
              Current available: {{ (ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='size_available') | first / 1024 / 1024 / 1024) | round(2) }}GB
            success_msg: "Sufficient disk space available"
          when: ansible_mounts is defined

        - name: Validate profile compatibility
          assert:
            that:
              - profile_compatibility[profile | default('minimal')][ansible_distribution | lower] | default(true)
            fail_msg: |
              Profile '{{ profile | default('minimal') }}' is not compatible with {{ ansible_distribution }}.

              Supported profiles for {{ ansible_distribution }}:
              {{ profile_compatibility | dict2items | selectattr('value.' + (ansible_distribution | lower), 'defined') | selectattr('value.' + (ansible_distribution | lower)) | map(attribute='key') | list | join(', ') }}
            success_msg: "Profile '{{ profile | default('minimal') }}' is compatible with {{ ansible_distribution }}"
          when: profile_compatibility is defined

        - name: Check network connectivity
          uri:
            url: https://www.google.com
            method: HEAD
            timeout: 10
          register: network_check
          failed_when: false
          changed_when: false

        - name: Warn about network connectivity
          debug:
            msg: |
              ‚ö†Ô∏è  WARNING: Network connectivity check failed.
              Some packages may not install correctly.
              Error: {{ network_check.msg | default('Unknown network error') }}
          when: network_check.status is defined and network_check.status != 200

      rescue:
        - name: Handle validation failures
          fail:
            msg: |
              ‚ùå Pre-flight validation failed!

              Please resolve the above issues before continuing.

              For help, see:
              - docs/TROUBLESHOOTING.md
              - Run: ./scripts/validate.sh
              - Run: ./scripts/bootstrap.sh (if dependencies are missing)
      tags: ['always', 'validation']

    - name: Create system runtime directories
      file:
        path: /var/log/ansible
        state: directory
        mode: '0755'
      become: yes
      when: ansible_os_family != "Windows"
      ignore_errors: yes  # Don't fail if we can't create system directories
      tags: ['always']

    - name: Create user runtime directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ ansible_env.HOME }}/.dotsible"
        - "{{ ansible_env.HOME }}/.dotsible/backups"
        - "{{ ansible_env.HOME }}/.dotsible/logs"
      when: ansible_os_family != "Windows"
      tags: ['always']

    - name: Initialize execution log
      copy:
        content: |
          Dotsible Execution Log
          =====================

          Execution ID: {{ execution_timestamp }}
          Host: {{ inventory_hostname }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Profile: {{ profile | default('minimal') }}
          Dry Run: {{ dry_run_mode }}
          Started: {{ ansible_date_time.iso8601 }}

        dest: "{{ ansible_env.HOME }}/.dotsible/logs/execution_{{ execution_timestamp | regex_replace('[^0-9]', '') }}.log"
        mode: '0644'
      tags: ['always']

- name: Bootstrap System
  hosts: all
  gather_facts: no
  become: yes
  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"

  pre_tasks:
    - name: Bootstrap phase banner
      debug:
        msg: |
          üîß BOOTSTRAP PHASE
          ==================
          Installing essential packages and configuring package managers...
      tags: ['always']

    - name: Create backup before bootstrap (if enabled)
      command: "{{ playbook_dir }}/scripts/backup.sh --dotfiles-only"
      delegate_to: localhost
      run_once: true
      when:
        - backup_before_run | default(false)
        - not ansible_check_mode
      tags: ['backup']

  roles:
    - role: common
      tags: ['common', 'bootstrap']

    

    # Platform-specific setup
    - role: platform_specific/macos
      when: ansible_os_family == "Darwin"
      tags: ['platform', 'macos']

    - role: platform_specific/windows
      when: ansible_os_family == "Windows"
      tags: ['platform', 'windows']

    - role: platform_specific/archlinux
      when: ansible_distribution == "Archlinux"
      tags: ['platform', 'archlinux']

    - role: platform_specific/ubuntu
      when: ansible_os_family == "Debian"
      tags: ['platform', 'ubuntu']

  post_tasks:
    - name: Verify bootstrap completion
      block:
        - name: Check package manager functionality
          package:
            name: curl
            state: present
          register: package_test
          failed_when: false
          changed_when: false

        - name: Bootstrap verification
          assert:
            that:
              - package_test is not failed
            fail_msg: |
              ‚ùå Bootstrap verification failed!
              Package manager is not functioning correctly.
              Please check the bootstrap logs and try again.
            success_msg: "‚úÖ Bootstrap completed successfully"

        - name: Log bootstrap completion
          copy:
            content: |
              Bootstrap Phase Completed
              ========================

              Timestamp: {{ ansible_date_time.iso8601 }}
              Host: {{ inventory_hostname }}
              OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
              Profile: {{ profile | default('minimal') }}
              Package Manager: {{ package_manager | default('auto-detected') }}

              Status: SUCCESS

            dest: "{{ ansible_env.HOME }}/.dotsible/logs/bootstrap.log"
            mode: '0644'
          become: no
          when: ansible_os_family != "Windows"

      rescue:
        - name: Handle bootstrap failure
          fail:
            msg: |
              ‚ùå Bootstrap phase failed!

              This is a critical error that prevents further execution.
              Please check:
              1. Internet connectivity
              2. Package manager configuration
              3. System permissions

              For troubleshooting, see docs/TROUBLESHOOTING.md
      tags: ['always']

- name: Python Version Management
  hosts: all
  gather_facts: no
  become: no
  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"

  pre_tasks:
    - name: Python management phase banner
      debug:
        msg: |
          üêç PYTHON VERSION MANAGEMENT
          ============================
          Target Python version: {{ python_version_management.target_version }}
          Current Python version: {{ dotsible_python_version | default('Unknown') }}
          Upgrade needed: {{ 'YES' if dotsible_python_needs_upgrade | default(true) else 'NO' }}
      tags: ['always']

  roles:
    - role: python_management
      tags: ['python', 'python_management']
      when: python_version_management.auto_upgrade | default(true)

  post_tasks:
    - name: Python management completion
      debug:
        msg: |
          üêç Python Version Management Complete
          ====================================
          ‚Ä¢ Python version: {{ detected_python_version | default('Unknown') }}
          ‚Ä¢ pip available: {{ 'YES' if detected_pip_version is defined else 'NO' }}
          ‚Ä¢ pipx available: {{ 'YES' if pipx_available | default(false) else 'NO' }}

          {% if python_packages_backup is defined %}
          ‚Ä¢ Package backup: {{ python_packages_backup.backup_path }}
          {% endif %}
      tags: ['always']

- name: Configure Applications
  hosts: all
  gather_facts: no
  become: no

  pre_tasks:
    - name: Applications phase banner
      debug:
        msg: |
          üì± APPLICATIONS PHASE
          ====================
          Installing and configuring applications for profile: {{ profile | default('minimal') }}
          Applications: {{ profiles[profile | default('minimal')].applications | default([]) | join(', ') }}
      tags: ['always']

    - name: Validate application requirements
      block:
        - name: Check if applications are defined for profile
          assert:
            that:
              - profiles[profile | default('minimal')].applications is defined
              - profiles[profile | default('minimal')].applications | length > 0
            fail_msg: |
              No applications defined for profile '{{ profile | default('minimal') }}'.
              Please check your profile configuration in group_vars/all/profiles.yml
            success_msg: "Applications defined for profile '{{ profile | default('minimal') }}'"

        - name: Display application installation plan
          debug:
            msg: |
              üìã Application Installation Plan:
              {% for app in profiles[profile | default('minimal')].applications %}
              - {{ app }}
              {% endfor %}
          when: not ansible_check_mode

      rescue:
        - name: Handle application validation failure
          debug:
            msg: |
              ‚ö†Ô∏è  Application validation failed, but continuing with available applications.
              Some applications may not be installed.
      tags: ['always']

  roles:
    - role: applications/fonts
      tags: ['applications', 'fonts']
      when: profile in ['minimal', 'developer', 'enterprise']

    - role: applications/zoxide
      tags: ['applications', 'zoxide', 'cli-tools']
      when: profile in ['minimal', 'developer', 'enterprise']

    

    # FZF must be installed before shell configurations that depend on it
    - role: applications/fzf
      tags: ['applications', 'fzf']
      when: "'fzf' in profiles[profile | default('minimal')].applications | default([])"

    - role: applications/zsh
      tags: ['applications', 'zsh']
      when: "'zsh' in profiles[profile | default('minimal')].applications | default([])"

    - role: applications/tmux
      tags: ['applications', 'tmux']
      when: "'tmux' in profiles[profile | default('minimal')].applications | default([])"

    - role: applications/alacritty
      tags: ['applications', 'alacritty']
      when: "'alacritty' in profiles[profile | default('minimal')].applications | default([])"

    - role: applications/starship
      tags: ['applications', 'starship']
      when: "'starship' in profiles[profile | default('minimal')].applications | default([])"

    # Window manager specific configurations (Linux only)
    - role: applications/i3
      tags: ['applications', 'i3', 'window-manager']
      when:
        - dotsible_window_manager is defined
        - dotsible_window_manager == "i3"
        - "'i3' in profiles[profile | default('minimal')].applications | default([])"

    - role: applications/hyprland
      tags: ['applications', 'hyprland', 'window-manager']
      when:
        - dotsible_window_manager is defined
        - dotsible_window_manager == "hyprland"
        - "'hyprland' in profiles[profile | default('minimal')].applications | default([])"

    - role: applications/sway
      tags: ['applications', 'sway', 'window-manager']
      when:
        - dotsible_window_manager is defined
        - dotsible_window_manager == "sway"
        - "'sway' in profiles[profile | default('minimal')].applications | default([])"

    # macOS Enterprise Management
    - role: macos_enterprise
      tags: ['macos_enterprise', 'enterprise', 'mdm', 'desktop', 'macos']
      when: ansible_os_family == "Darwin"

  post_tasks:
    - name: Verify application installations
      block:
        - name: Test installed applications
          command: "{{ item.command }}"
          loop: "{{ application_verification | default([]) }}"
          register: app_verification_results
          failed_when: false
          changed_when: false
          when: item.name in profiles[profile | default('minimal')].applications | default([])

        - name: Log application configuration completion
          copy:
            content: |
              Application Configuration Completed
              ==================================

              Timestamp: {{ ansible_date_time.iso8601 }}
              Host: {{ inventory_hostname }}
              Profile: {{ profile | default('minimal') }}
              Applications: {{ profiles[profile | default('minimal')].applications | default([]) | join(', ') }}

              Verification Results:
              {% for result in app_verification_results.results | default([]) %}
              - {{ result.item.name }}: {{ 'SUCCESS' if result.rc == 0 else 'FAILED' }}
              {% endfor %}

            dest: "{{ ansible_env.HOME }}/.dotsible/logs/applications.log"
            mode: '0644'
          become: no
          when: ansible_os_family != "Windows"

      rescue:
        - name: Handle application verification failure
          debug:
            msg: |
              ‚ö†Ô∏è  Some application verifications failed.
              Applications may still be functional.
              Check the application logs for details.
      tags: ['always']

- name: Apply Profile Configuration
  hosts: all
  gather_facts: no
  become: no

  roles:
    - role: profiles/developer
      tags: ['profiles', 'developer']
      when: profile == "developer"

    # Environment-specific configurations
    - role: profiles/enterprise
      tags: ['profiles', 'enterprise']
      when:
        - profile is defined
        - profile == "enterprise" or environment_type == "enterprise"

    - role: dotfiles
      tags: ['dotfiles', 'configuration', 'conditional']
      when: dotfiles_enabled | default(true)

  post_tasks:
    - name: Create profile summary
      template:
        src: profile_summary.j2
        dest: "{{ ansible_env.HOME }}/.ansible_profile_summary"
        mode: '0644'
      vars:
        profile_name: "{{ profile | default('minimal') }}"
        profile_config: "{{ profiles[profile | default('minimal')] }}"
        installation_date: "{{ ansible_date_time.iso8601 }}"
      tags: ['always']

    - name: Display completion message
      debug:
        msg: |
          ========================================
          Configuration Complete!
          ========================================
          Host: {{ inventory_hostname }}
          Profile: {{ profile | default('minimal') }}
          Applications: {{ profiles[profile | default('minimal')].applications | join(', ') }}
          Features: {{ profiles[profile | default('minimal')].features | join(', ') }}

          Summary saved to: ~/.ansible_profile_summary
          Logs available in: ~/.dotsible/logs/

          You may need to restart your shell or reboot to apply all changes.
      tags: ['always']

- name: Verification and Cleanup
  hosts: all
  gather_facts: no
  become: no

  tasks:
    - name: Verify critical applications
      command: "{{ item.command }}"
      loop: "{{ application_verification | default([]) }}"
      register: verification_results
      failed_when: false
      changed_when: false
      tags: ['verify']

    - name: Create verification report
      template:
        src: verification_report.j2
        dest: "{{ ansible_env.HOME }}/.ansible_verification_report"
        mode: '0644'
      vars:
        verification_results: "{{ verification_results }}"
      when: verification_results is defined
      tags: ['verify']

    - name: Cleanup temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/ansible_temp
        - /tmp/install_oh_my_zsh.sh
        - /tmp/homebrew_install.sh
      when: cleanup_temp_files | default(true)
      tags: ['cleanup']

    - name: Final system status
      debug:
        msg: |
          System configuration completed successfully!
          Profile: {{ profile | default('minimal') }}
          Verification report: ~/.ansible_verification_report

          Next steps:
          1. Restart your shell: exec $SHELL
          2. Review configuration: cat ~/.ansible_profile_summary
          3. Check logs: ls -la ~/.dotsible/logs/
      tags: ['always']