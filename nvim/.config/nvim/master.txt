# File: ./init.lua
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
  if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)
vim.g.mapleader = ' '
vim.g.maplocalleader = ' '
require("lazy").setup("plugins")
require("settings")
require('lualine').setup()
# File: ./lua/plugins/autopairs.lua
return {
  'windwp/nvim-autopairs',
  event = "InsertEnter",
  opts = {},
  config = function()
    require('nvim-autopairs').setup({
      disable_filetype = { "TelescopePrompt" , "vim" },
  })
  end
}
# File: ./lua/plugins/cmp.lua
return {
  "hrsh7th/nvim-cmp",
  name = "cmp",
  priority = 1000,
  config = function()
    local cmp = require'cmp'
    local lspkind = require('lspkind')
    cmp.setup({
      formatting = {
        format = lspkind.cmp_format({
          fields = {'menu', 'abbr', 'kind'},
          mode = 'symbol',
          ellipsis_char = '...',
          show_labelDetails = true,
    lspkind.init({
    symbol_map = {
      Text = "󰉿",
      Method = "󰆧",
      Function = "󰊕",
      Constructor = "",
      Field = "󰜢",
      Variable = "󰀫",
      Class = "󰠱",
      Interface = "",
      Module = "",
      Property = "󰜢",
      Unit = "󰑭",
      Value = "󰎠",
      Enum = "",
      Keyword = "󰌋",
      Snippet = "",
      Color = "󰏘",
      File = "󰈙",
      Reference = "󰈇",
      Folder = "󰉋",
      EnumMember = "",
      Constant = "󰏿",
      Struct = "󰙅",
      Event = "",
      Operator = "󰆕",
      TypeParameter = "",
    },
    })
        })
      }
    })
    cmp.setup({
      snippet = {
       -- REQUIRED - you must specify a snippet engine
       expand = function(args)
         require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
         -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
         -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
       end,
      },
     window = {
       completion = cmp.config.window.bordered(),
       documentation = cmp.config.window.bordered(),
     },
     experimental = {
       ghost_text = true,
       native_menu = false,
     },
     mapping = cmp.mapping.preset.insert({
       ['<C-b>'] = cmp.mapping.scroll_docs(-4),
       ['<C-f>'] = cmp.mapping.scroll_docs(4),
       ['<C-Space>'] = cmp.mapping.complete(),
       ['<C-e>'] = cmp.mapping.abort(),
       ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
     }),
     sources = cmp.config.sources({
       { name = 'nvim_lsp', keyword_length = 2 },
       { name = 'nvim_lsp_document_symbol', keyword_length = 2 },
       { name = 'nvim-lsp-signature-help', keyword_length = 2 },
       { name = 'luasnip', keyword_length = 2 },
       { name = 'buffer', keyword_length = 2 },
       --{ name = 'cmdline' },
       { name = 'path', keyword_length = 2 },
       { name = 'nvim-lua', keyword_length = 2 },
       { name = 'lspkind', keyword_length = 2 },
       { name = 'git', keyword_length = 2 },
       { name = 'cmdline_history', keyword_length = 4 },
      })
    })
    local capabilities = require('cmp_nvim_lsp').default_capabilities()
    require('lspconfig')['lua_ls'].setup {
      capabilities = capabilities
    }
    require('lspconfig')['cssmodules_ls'].setup {
      capabilities = capabilities
    }
    require('lspconfig')['bashls'].setup {
      capabilities = capabilities
    }
    require('lspconfig')['emmet_language_server'].setup {
      capabilities = capabilities
    }
    require('lspconfig')['html'].setup {
      capabilities = capabilities
    }
    require('lspconfig')['pylsp'].setup {
      capabilities = capabilities
    }
    require('lspconfig')['tailwindcss'].setup {
      capabilities = capabilities
    }
    require('lspconfig')['tsserver'].setup {
      capabilities = capabilities
    }
    require('lspconfig')['gopls'].setup {
      capabilities = capabilities
    }
    require('lspconfig')['htmx'].setup {
      capabilities = capabilities
    }
    require('lspconfig')['clangd'].setup {
      capabilities = capabilities
    }
    require('lspconfig')['asm_lsp'].setup {
      capabilities = capabilities
    }
  end
}
# File: ./lua/plugins/cmp-nvim-lsp.lua
return {
  "hrsh7th/cmp-nvim-lsp",
  name = "nvim-lsp",
  priority = 1000,
}
# File: ./lua/plugins/cmp-sources.lua
return {
  {
  "hrsh7th/cmp-buffer",
  name = "buffer",
  priority = 1000,
  },
  {
  "hrsh7th/cmp-cmdline",
  name = "cmdline",
  priority = 1000,
  },
  {
  "hrsh7th/cmp-path",
  name = "path",
  priority = 1000,
  },
  {
  "hrsh7th/cmp-nvim-lua",
  name = "nvim-lua",
  priority = 1000,
  },
  {
  "hrsh7th/cmp-nvim-lsp",
  name = "nvim_lsp",
  priority = 1000,
  },
  {
  "petertriho/cmp-git",
  name = "git",
  priority = 1000,
  },
  {
  "Dynge/gitmoji.nvim",
  name = "gitmoji",
  priority = 1000,
  },
  {
  "dmitmel/cmp-cmdline-history",
  name = "cmdline_history",
  priority = 1000,
  },
  {
  "hrsh7th/cmp-nvim-lsp-document-symbol",
  name = "nvim_lsp_document_symbol",
  priority = 1000,
  },
  {
  "hrsh7th/cmp-nvim-lsp-signature-help",
  name = "nvim-lsp-signature-help",
  priority = 1000,
  },
  {
  "onsails/lspkind.nvim",
  name = "lspkind",
  priority = 1000,
  },
  {
  "L3MON4D3/LuaSnip",
  name = "luasnip",
  priority = 1000,
  },
  }
# File: ./lua/plugins/float-term.lua
return {
  'voldikss/vim-floaterm',
  name= "floaterm",
  priority = 1000,
  setup = function ()
    -- Set global configurations (optional)
    vim.g.floaterm_width = 1.0
    vim.g.floaterm_height = 1.0
    vim.g.floaterm_wintype = 'float'
    vim.g.floaterm_position = 'center'

    -- Autoresponsive
    vim.api.nvim_exec([[
      autocmd VimResized * FloatermUpdate --height=0.9 --width=0.9
    ]], false)

end,
    -- Lazy loading: Automatically start floaterm when these commands are used
    --cmd = {'FloatermNew', 'FloatermToggle', 'FloatermPrev', 'FloatermNext'}
 }

# File: ./lua/plugins/gitsigns.lua
return {
  'lewis6991/gitsigns.nvim',
  name = 'gitsigns',
  priority = 1000,
}
# File: ./lua/plugins/gruvbox.lua
return  {
  "ellisonleao/gruvbox.nvim",
  name = "gruvbox.nvim",
  priority = 1000,
  config = true,
  }

# File: ./lua/plugins/harpoon.lua
return {
  'theprimeagen/harpoon',
  name = "harpoon",
  priority = 1000,
  config = function()
    require('harpoon').setup()
    local mark = require('harpoon.mark').add_mark
    local ui = require('harpoon.ui')

    -- toggle menus
    vim.keymap.set('n', '<leader>ui', function() ui.toggle_quick_menu() end, {silent = true})
    vim.keymap.set('n', '<leader>m', function() mark() end, {silent = true})

    -- Harpoon next and previous
    vim.keymap.set('n', '<leader>jn', function() require('harpoon.ui').next_buffer() end, {silent = true})
    vim.keymap.set('n', '<leader>jp', function() require('harpoon.ui').prev_buffer() end, {silent = true})

    -- Harpoon add and remove
    vim.keymap.set('n', '<leader>ha', function() require('harpoon.ui').add_file() end, {silent = true})
    vim.keymap.set('n', '<leader>hr', function() require('harpoon.ui').remove_file() end, {silent = true})

    -- Harpoon commands to terminal
    vim.keymap.set('n', '<leader>hc', function() require('harpoon.term').sendCommand(1, "ls -La") end, {silent = true})

    -- Harpoon tmux commands
  end,
}
# File: ./lua/plugins/lspsaga.lua
return {
  'nvimdev/lspsaga.nvim',
  name = "lspsaga",
  priority = 1000,
  dependencies = {
      'nvim-treesitter/nvim-treesitter', -- optional
      'nvim-tree/nvim-web-devicons',     -- optional
  },
  config = function()
      require('lspsaga').setup({
      symbol_in_winbar = {
      enable = true,
      separator = ' › ',
      show_file = true,
      color_mode = true
  },
  diagnostic = {
      show_code_action = true,
      jump_num_shortcut = true,
      max_width = 0.8,
      max_height = 0.6,
      border_follow = true,
      diagnostic_only_current = false  -- Show diagnostics for all lines, not just the current line
  },
  code_action = {
      num_shortcut = true,
      show_server_name = true
  },
  finder = {
      max_height = 0.6,
      max_width = 0.8,
      default = 'ref+imp',  -- Default to show references and implementations
      methods = {
          tyd = 'textDocument/typeDefinition'  -- Add type definitions to the search
      }
  },
  hover = {
      max_width = 0.8,
      max_height = 0.8,
      open_link = 'gx',  -- Set to 'gx' or another shortcut for opening links
  },
  rename = {
      in_select = true,
      auto_save = false  -- Set to true if you want automatic saving after renaming
  }
    })
  end,
}
# File: ./lua/plugins/lualine.lua
return {
  'nvim-lualine/lualine.nvim',
  dependencies = { 'nvim-tree/nvim-web-devicons' },
  priority = 1000,
  config = function()

-- Eviline config for lualine
-- Author: shadmansaleh
-- Credit: glepnir
local lualine = require('lualine')

-- Color table for highlights
-- stylua: ignore
local colors = {
  bg       = '#202328',
  fg       = '#bbc2cf',
  yellow   = '#ECBE7B',
  cyan     = '#008080',
  darkblue = '#081633',
  green    = '#98be65',
  orange   = '#FF8800',
  violet   = '#a9a1e1',
  magenta  = '#c678dd',
  blue     = '#51afef',
  red      = '#ec5f67',
}

local conditions = {
  buffer_not_empty = function()
    return vim.fn.empty(vim.fn.expand('%:t')) ~= 1
  end,
  hide_in_width = function()
    return vim.fn.winwidth(0) > 80
  end,
  check_git_workspace = function()
    local filepath = vim.fn.expand('%:p:h')
    local gitdir = vim.fn.finddir('.git', filepath .. ';')
    return gitdir and #gitdir > 0 and #gitdir < #filepath
  end,
}

-- Config
local config = {
  options = {
    -- Disable sections and component separators
    component_separators = '',
    section_separators = '',
    theme = {
      -- We are going to use lualine_c an lualine_x as left and
      -- right section. Both are highlighted by c theme .  So we
      -- are just setting default looks o statusline
      normal = { c = { fg = colors.fg, bg = colors.bg } },
      inactive = { c = { fg = colors.fg, bg = colors.bg } },
    },
  },
  sections = {
    -- these are to remove the defaults
    lualine_a = {},
    lualine_b = {},
    lualine_y = {},
    lualine_z = {},
    -- These will be filled later
    lualine_c = {},
    lualine_x = {},
  },
  inactive_sections = {
    -- these are to remove the defaults
    lualine_a = {},
    lualine_b = {},
    lualine_y = {},
    lualine_z = {},
    lualine_c = {},
    lualine_x = {},
  },
}

-- Inserts a component in lualine_c at left section
local function ins_left(component)
  table.insert(config.sections.lualine_c, component)
end

-- Inserts a component in lualine_x at right section
local function ins_right(component)
  table.insert(config.sections.lualine_x, component)
end

ins_left {
  function()
    return '▊'
  end,
  color = { fg = colors.blue }, -- Sets highlighting of component
  padding = { left = 0, right = 1 }, -- We don't need space before this
}

ins_left {
  -- mode component
  function()
    return ''
  end,
  color = function()
    -- auto change color according to neovims mode
    local mode_color = {
      n = colors.red,
      i = colors.green,
      v = colors.blue,
      [''] = colors.blue,
      V = colors.blue,
      c = colors.magenta,
      no = colors.red,
      s = colors.orange,
      S = colors.orange,
      [''] = colors.orange,
      ic = colors.yellow,
      R = colors.violet,
      Rv = colors.violet,
      cv = colors.red,
      ce = colors.red,
      r = colors.cyan,
      rm = colors.cyan,
      ['r?'] = colors.cyan,
      ['!'] = colors.red,
      t = colors.red,
    }
    return { fg = mode_color[vim.fn.mode()] }
  end,
  padding = { right = 1 },
}

ins_left {
  -- filesize component
  'filesize',
  cond = conditions.buffer_not_empty,
}

ins_left {
  'filename',
  cond = conditions.buffer_not_empty,
  color = { fg = colors.magenta, gui = 'bold' },
}

ins_left { 'location' }

ins_left { 'progress', color = { fg = colors.fg, gui = 'bold' } }

ins_left {
  'diagnostics',
  sources = { 'nvim_diagnostic' },
  symbols = { error = ' ', warn = ' ', info = ' ' },
  diagnostics_color = {
    color_error = { fg = colors.red },
    color_warn = { fg = colors.yellow },
    color_info = { fg = colors.cyan },
  },
}

-- Insert mid section. You can make any number of sections in neovim :)
-- for lualine it's any number greater then 2
ins_left {
  function()
    return '%='
  end,
}

ins_left {
  -- Lsp server name .
  function()
    local msg = 'No Active Lsp'
    local buf_ft = vim.api.nvim_buf_get_option(0, 'filetype')
    local clients = vim.lsp.get_active_clients()
    if next(clients) == nil then
      return msg
    end
    for _, client in ipairs(clients) do
      local filetypes = client.config.filetypes
      if filetypes and vim.fn.index(filetypes, buf_ft) ~= -1 then
        return client.name
      end
    end
    return msg
  end,
  icon = ' LSP:',
  color = { fg = '#ffffff', gui = 'bold' },
}

-- Add components to right sections
ins_right {
  'o:encoding', -- option component same as &encoding in viml
  fmt = string.upper, -- I'm not sure why it's upper case either ;)
  cond = conditions.hide_in_width,
  color = { fg = colors.green, gui = 'bold' },
}

ins_right {
  'fileformat',
  fmt = string.upper,
  icons_enabled = false, -- I think icons are cool but Eviline doesn't have them. sigh
  color = { fg = colors.green, gui = 'bold' },
}

ins_right {
  'branch',
  icon = '',
  color = { fg = colors.violet, gui = 'bold' },
}

ins_right {
  'diff',
  -- Is it me or the symbol for modified us really weird
  symbols = { added = ' ', modified = '󰝤 ', removed = ' ' },
  diff_color = {
    added = { fg = colors.green },
    modified = { fg = colors.orange },
    removed = { fg = colors.red },
  },
  cond = conditions.hide_in_width,
}

ins_right {
  function()
    return '▊'
  end,
  color = { fg = colors.blue },
  padding = { left = 1 },
}

-- Now don't forget to initialize lualine
lualine.setup(config)

  end
}
# File: ./lua/plugins/markdown-preview.lua
return {
  "iamcco/markdown-preview.nvim",
  cmd = { "MarkdownPreviewToggle", "MarkdownPreview", "MarkdownPreviewStop" },
  build = "cd app && yarn install",
  init = function()
    vim.g.mkdp_filetypes = { "markdown" }
  end,
  ft = { "markdown" },
}
# File: ./lua/plugins/masonlsp.lua
return {
  "williamboman/mason-lspconfig.nvim",
  dependencies = { "neovim/nvim-lspconfig", "nvimtools/none-ls.nvim" },
  name = "mason-lspconfig.nvim",
  priority = 1000,
  config = function()
    require("mason-lspconfig").setup {
  ensure_installed = { 'lua_ls', 'cssmodules_ls', 'emmet_language_server', 'html', 'pylsp', 'tailwindcss', 'tsserver', 'gopls', 'htmx', 'clangd' }
    }
end
}
# File: ./lua/plugins/mason.lua
return {
  "williamboman/mason.nvim",
  name = "mason.nvim",
  priority = 1000,
  config = function()
    require("mason").setup({
    ui = {
        icons = {
            package_installed = "✓",
            package_pending = "➜",
            package_uninstalled = "✗"
        }
    }
})
  end
}
# File: ./lua/plugins/mojo.lua
return {
  { "czheo/mojo.vim", ft = { "mojo" },
    init = function()
      vim.api.nvim_create_autocmd({ "BufNewFile", "BufRead" }, {
        pattern = { "*.🔥" },
        callback = function()
          if vim.bo.filetype ~= "mojo" then
            vim.bo.filetype = "mojo"
          end
        end,
      })
      vim.api.nvim_create_autocmd("FileType", {
        pattern = "mojo",
        callback = function()
          local modular = vim.env.MODULAR_HOME
          local lsp_cmd = modular .. "/pkg/packages.modular.com_mojo/bin/mojo-lsp-server"
          vim.bo.expandtab = true
          vim.bo.shiftwidth = 4
          vim.bo.softtabstop = 4
          vim.lsp.start({ name = "mojo", cmd = { lsp_cmd }, })
        end,
      })
    end,
  },
}
# File: ./lua/plugins/none-ls.lua
return {
      "nvimtools/none-ls.nvim",
    dependencies = { 'jose-elias-alvarez/null-ls.nvim' },
    priority = 1000,
    config = function()
      local null_ls = require("null-ls")
      local methods = null_ls.methods
      local sources = null_ls.builtins


      null_ls.setup({
          sources = {
              null_ls.builtins.formatting.stylua.with({
                filetypes = {"lua"}
                    }),
              null_ls.builtins.code_actions.gitsigns,
              null_ls.builtins.code_actions.refactoring,
              sources.formatting.prettier.with({
      filetypes = { "typescript", "typescriptreact", "javascript", "javascriptreact" }, -- Filetypes
      method = methods.FORMATTING, -- Trigger on LSP's format request
    })
          },
      })
    end
}

# File: ./lua/plugins/nvim-devdocs.lua
return {
  "luckasRanarison/nvim-devdocs",
  dependencies = {
    "nvim-lua/plenary.nvim",
    "nvim-telescope/telescope.nvim",
    "nvim-treesitter/nvim-treesitter",
  },
  opts = {
    wrap = true,
    float_win = {
      relative = "editor",
      -- Dynamically calculate height and width based on available space
      height = 50,
      width = 100,
      border = "rounded",
    },
  }
}
# File: ./lua/plugins/oil.lua
return {
  'stevearc/oil.nvim',
  opts = {},
  -- Optional dependencies
  dependencies = { "nvim-tree/nvim-web-devicons" },
  config = function ()
    require("oil").setup({
      default_file_explorer = true,
    })
  end
}
# File: ./lua/plugins/plenary.lua
return {
  'nvim-lua/plenary.nvim',
  name = 'plenary.nvim',
  priority = 1000,
}
# File: ./lua/plugins/telescope-file-browser.lua
return {
  "nvim-telescope/telescope-file-browser.nvim",
  dependencies = { "nvim-telescope/telescope.nvim", "nvim-lua/plenary.nvim" },
  priority = 1000,
  config = function()
  vim.api.nvim_set_keymap(
  "n",
  "<space>fb",
  ":Telescope file_browser<CR>",
  { noremap = true }
)
  end
}
# File: ./lua/plugins/telescope.lua
return {
  "nvim-telescope/telescope.nvim",
  dependencies = { 'nvim-lua/plenary.nvim' },
  name = "telescope.nvim",
  priority = 1000,
  config = function()
    local builtin = require('telescope.builtin')
    require('telescope').setup {
      defaults = {
        layout_strategy = "flex", -- Automatically switch between horizontal and vertical layouts
        layout_config = {
          height = function(_, max_lines)
            return math.floor(max_lines * 0.95) -- Set height to 95% of available space
          end,
          width = function(_, max_columns)
            return math.floor(max_columns * 0.95) -- Set width to 95% of available space
          end,
          horizontal = {
            prompt_position = "top", -- Place prompt at the top in horizontal layout
            preview_width = 0.6, -- Allocate 60% of width to preview window
          },
          vertical = {
            mirror = false, -- Place preview below results in vertical layout
          },
        },
      },
    }
    -- Keep your existing builtin picker calls here
    -- For example: 
    -- builtin.find_files()
    -- builtin.live_grep()
    -- ...
  end
}
# File: ./lua/plugins/terminus.lua
return {
  "wincent/terminus",
  name = "terminus",
  priority = 1000,
  config = function()
    -- Configure the cursor shapes before plugin initialization
    vim.g.TerminusCursorShape = 1 -- Enable cursor shape changes
    vim.g.TerminusInsertCursorShape = 1 -- Set cursor to 'bar' shape in insert mode
    vim.g.TerminusNormalCursorShape = 0 -- Set cursor to 'block' shape in normal mode
  end,
}
# File: ./lua/plugins/treesitter.lua
return {
  {
    "nvim-treesitter/nvim-treesitter",
    build = ":TSUpdate",
    config = function()
      local config = require("nvim-treesitter.configs")
      config.setup({
        ensure_installed = {"lua", "javascript", "asm", "c", "html", "go", "rust"},
        highlight = { enable = true },
        indent = { enable = true },
      })
    end
  }
}
# File: ./lua/plugins/vim-fugitive.lua
return {
  'tpope/vim-fugitive',
  name = 'vim-fugitive',
  priority = 1000,
}
# File: ./lua/plugins/which-key.lua
return {
  "folke/which-key.nvim",
  event = "VeryLazy",
  init = function()
    vim.o.timeout = true
    vim.o.timeoutlen = 300
  end,
  config = function()
    local which_key = require('which-key')
    local map_opts = { noremap = true, silent = true }
    which_key.setup {}

    -- convert window management prefix from <C-w> to <C-p>
vim.api.nvim_set_keymap('n', '<C-p>w', '<C-w>w', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>h', '<C-w>h', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>j', '<C-w>j', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>k', '<C-w>k', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>l', '<C-w>l', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>v', '<C-w>v', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>s', '<C-w>s', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>q', '<C-w>q', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>c', '<C-w>c', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>+', '<C-w>+', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>-', '<C-w>-', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>>', '<C-w>>', map_opts)
vim.api.nvim_set_keymap('n', '<C-p><', '<C-w><', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>=', '<C-w>=', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>T', '<C-w>T', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>o', '<C-w>o', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>r', '<C-w>r', map_opts)
vim.api.nvim_set_keymap('n', '<C-p>_', '<C-w>_', map_opts)

    -- DevDocs Keybindings directly
vim.api.nvim_set_keymap('n', '<leader>fz', ':DevdocsOpenCurrentFloat<CR>', map_opts)

-- Oil.nvim Keybindings directly
vim.api.nvim_set_keymap('n', '<leader>of', ':lua require("oil").open_float()<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>ot', ':lua require("oil").toggle_float()<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>oc', ':lua require("oil").close()<CR>', map_opts)

-- Floaterm Keybindings directly
vim.api.nvim_set_keymap('n', '<leader>fn', ':FloatermNew<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>fp', ':FloatermPrev<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>ft', ':FloatermToggle<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>fx', ':FloatermKill<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>fc', ':FloatermNew bash -c \'gcc % && ./a.out; echo Press ENTER to close; read\'<CR>', map_opts)

-- Telescope Keybindings
vim.api.nvim_set_keymap('n', '<leader>ff', ':Telescope find_files<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>fg', ':Telescope live_grep<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>fb', ':Telescope buffers<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>fh', ':Telescope help_tags<CR>', map_opts)

-- Harpoon Keybindings
vim.api.nvim_set_keymap('n', '<leader>ui', ':lua require("harpoon.ui").toggle_quick_menu()<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>m', ':lua require("harpoon.mark").add_mark()<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>jn', ':lua require("harpoon.ui").next_buffer()<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>jp', ':lua require("harpoon.ui").prev_buffer()<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>ha', ':lua require("harpoon.ui").add_file()<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>hr', ':lua require("harpoon.ui").remove_file()<CR>', map_opts)
vim.api.nvim_set_keymap('n', '<leader>hc', ':lua require("harpoon.term").sendCommand(1, "ls -La")<CR>', map_opts)


    -- Window management mappings changed from <C-w> to <C-p>
    -- Define the new window management key mappings with descriptions
    local window_mappings = {
      ["w"] = { "<C-w>w", "Other window" },
      ["h"] = { "<C-w>h", "Left window" },
      ["j"] = { "<C-w>j", "Below window" },
      ["k"] = { "<C-w>k", "Above window" },
      ["l"] = { "<C-w>l", "Right window" },
      ["v"] = { "<C-w>v", "Split vertically" },
      ["s"] = { "<C-w>s", "Split horizontally" },
      ["q"] = { "<C-w>q", "Close window" },
      ["c"] = { "<C-w>c", "Close other windows" },
      ["+"] = { "<C-w>+", "Increase height" },
      ["-"] = { "<C-w>-", "Decrease height" },
      [">"] = { "<C-w>>", "Increase width" },
      ["<"] = { "<C-w><", "Decrease width" },
      ["="] = { "<C-w>=", "Equalize window sizes" },
      ["T"] = { "<C-w>T", "Break out into tab" },
      ["o"] = { "<C-w>o", "Close other windows" },
      ["r"] = { "<C-w>r", "Rotate windows downwards/rightwards" },
      ["_"] = { "<C-w>_", "Maximize height" },
    }

    -- Register window management keys with which-key
    which_key.register(window_mappings, { prefix = "<C-p>" })

 -- Keybindings for Telescope with actions to open in splits
    local telescope_mappings = {
      ["ff"] = { "<cmd>Telescope find_files<cr>", "Find Files" },
      ["fg"] = { "<cmd>Telescope live_grep<cr>", "Live Grep" },
      ["fb"] = { "<cmd>Telescope buffers<cr>", "List Buffers" },
      ["fh"] = { "<cmd>Telescope help_tags<cr>", "Help Tags" },
      ["fx"] = { "<cmd>Telescope find_files<cr>", "Find Files", {
        ["<C-x>"] = "select_horizontal",
        ["<C-v>"] = "select_vertical"
      }},
    }
    which_key.register(telescope_mappings, { prefix = "<leader>" })

-- LSP Keybindings
local lsp_mappings = {
  e = { "<cmd>lua vim.diagnostic.open_float()<CR>", "Open diagnostics" },
  d = {
    name = "Diagnostics",
    p = { "<cmd>lua vim.diagnostic.goto_prev()<CR>", "Previous Diagnostic" },
    n = { "<cmd>lua vim.diagnostic.goto_next()<CR>", "Next Diagnostic" },
  },
  q = { "<cmd>lua vim.diagnostic.setloclist()<CR>", "Diagnostic Loclist" },
  f = {
    name = "Format",
    f = { "<cmd>lua vim.lsp.buf.formatting()<CR>", "Format Document" },
    s = { "<cmd>lua vim.lsp.buf.formatting_sync()<CR>", "Format Sync" },
  },
  g = {
    name = "Go",
    d = { "<cmd>lua vim.lsp.buf.definition()<CR>", "Go to Definition" },
    D = { "<cmd>lua vim.lsp.buf.declaration()<CR>", "Go to Declaration" },
    i = { "<cmd>lua vim.lsp.buf.implementation()<CR>", "Go to Implementation" },
    r = { "<cmd>lua vim.lsp.buf.references()<CR>", "Go to References" },
  },
  r = { "<cmd>lua vim.lsp.buf.rename()<CR>", "Rename" },
  a = { "<cmd>lua vim.lsp.buf.code_action()<CR>", "Code Action" },
  w = {
    name = "Workspace",
    a = { "<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>", "Add Folder" },
    r = { "<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>", "Remove Folder" },
    l = { "<cmd>lua vim.lsp.buf.list_workspace_folders()<CR>", "List Folders" },
  }
}

    -- Keybindings for File & Floaterm
    which_key.register({
      z = "Devdocs Open Current Float",
      n = "New Floaterm",
      p = "Previous Floaterm",
      t = "Toggle Floaterm",
      x = "Close Floaterm",
      c = "Compile & Run",
      f = "Find Files",  -- Telescope
      g = "Live Grep",  -- Telescope
      b = "Buffers",  -- Telescope
      h = "Help Tags",  -- Telescope
    }, { prefix = "<leader>f" })

    -- Keybindings for Oil
    which_key.register({
      f = "Open Oil Float",
      t = "Toggle Oil Float",
      c = "Close Oil Window",
      d = "Delete with Oil",  -- Ensure the function exists or remove this line if it does not
    }, { prefix = "<leader>o" })

    -- Keybindings for Harpoon
    which_key.register({
      ui = "Toggle Quick Menu",
      m = "Add Mark",
      jn = "Next Buffer",
      jp = "Previous Buffer",
      ha = "Add File",
      hr = "Remove File",
      hc = "Send Command"
    }, { prefix = "<leader>h" })

    -- LSP Keybindings
    which_key.register({
      e = { "<cmd>lua vim.diagnostic.open_float()<CR>", "Open diagnostics" },
      d = {
        name = "Diagnostics",
        p = { "<cmd>lua vim.diagnostic.goto_prev()<CR>", "Previous Diagnostic" },
        n = { "<cmd>lua vim.diagnostic.goto_next()<CR>", "Next Diagnostic" },
      },
      q = { "<cmd>lua vim.diagnostic.setloclist()<CR>", "Diagnostic Loclist" },
      f = {
        name = "Format",
        f = { "<cmd>lua vim.lsp.buf.formatting()<CR>", "Format Document" },
        s = { "<cmd>lua vim.lsp.buf.formatting_sync()<CR>", "Format Sync" },
      },
      g = {
        name = "Go",
        d = { "<cmd>lua vim.lsp.buf.definition()<CR>", "Go to Definition" },
        D = { "<cmd>lua vim.lsp.buf.declaration()<CR>", "Go to Declaration" },
        i = { "<cmd>lua vim.lsp.buf.implementation()<CR>", "Go to Implementation" },
        r = { "<cmd>lua vim.lsp.buf.references()<CR>", "Go to References" },
      },
      r = { "<cmd>lua vim.lsp.buf.rename()<CR>", "Rename" },
      a = { "<cmd>lua vim.lsp.buf.code_action()<CR>", "Code Action" },
      w = {
        name = "Workspace",
        a = { "<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>", "Add Folder" },
        r = { "<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>", "Remove Folder" },
        l = { "<cmd>lua vim.lsp.buf.list_workspace_folders()<CR>", "List Folders" },
      }
    }, { prefix = "<leader>l" })
  end
}
# File: ./lua/settings/init.lua
vim.cmd("set expandtab")
vim.cmd("set shiftwidth=2")
vim.cmd("set tabstop=2")
vim.cmd("set softtabstop=2")
vim.cmd([[colorscheme gruvbox]])
--vim.o.background = "dark" -- or "light" for light mode
vim.o.number = true -- Enable line numbers
vim.api.nvim_set_hl(0, 'Normal', { ctermbg = 'none' })
vim.api.nvim_set_hl(0, "CursorLine", { bg = "none" })
vim.api.nvim_set_hl(0, "CursorLineNr", { bg = "none" })
vim.api.nvim_set_hl(0, "String", { fg = "#b8bb26" })
vim.api.nvim_set_hl(0, "Comment", { fg = "Grey70", bg = "none" })
vim.api.nvim_set_hl(0, "NormalFloat", { bg = "none" })
vim.opt.winblend = 20
vim.api.nvim_set_hl(0, 'FloatBorder', {bg='#3B4252', fg='#5E81AC'})
vim.api.nvim_set_hl(0, 'NormalFloat', {bg='#3B4252'})
vim.api.nvim_set_hl(0, 'TelescopeNormal', {bg='#3B4252'})
vim.api.nvim_set_hl(0, 'TelescopeBorder', {bg='#3B4252'})
# File: ./lua/settings/lspconfig.lua
-- Setup language servers.
local lspconfig = require('lspconfig')

-- Server configurations
lspconfig.pyright.setup {}
lspconfig.tsserver.setup {
  settings = {
    typescript = {
      format = {
        enable = true,
      },
    },
  },
}
lspconfig.lua_ls.setup {
  on_attach = function(client, bufnr)
    require('completion').on_attach(client, bufnr)
    config.on_attach(client, bufnr)
    client.server_capabilities.documentFormatProvider = true
    client.server_capabilities.documentRangeFormatProvider = true
  end,
  settings = {
    Lua = {
      format = {
        enable = true,
        defaultConfig = {
          indent_style = "space",
          indent_size = "2",
        }
      },
    },
  },
}
-- Additional language server setups...
lspconfig.cssmodules_ls.setup {}
lspconfig.bashls.setup {}
lspconfig.emmet_language_server.setup {}
lspconfig.html.setup {}
lspconfig.pylsp.setup {}
lspconfig.asm_lsp.setup{
  cmd = { "asm-lsp" }, -- Command to start the language server
  filetypes = { "asm", "s", "S" }, -- File types to trigger lsp
  root_dir = lspconfig.util.root_pattern(".git", ".asm-lsp.toml"), -- Specifies how to find the root directory of the project
  settings = {
    version = "0.1",
    assemblers = {
      gas = true,   -- Enable features for GNU Assembler
      go = false    -- Disable features for Go Assembler
    },
    instruction_sets = {
      x86 = false,    -- Disable features for x86 instruction set
      x86_64 = true   -- Enable features for x86_64 instruction set
    }
  },
  on_attach = function(client, bufnr)
    require('completion').on_attach(client, bufnr)
    -- Set up any key mappings, for example:
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', {noremap = true, silent = true})
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', {noremap = true, silent = true})
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gh', '<cmd>lua vim.lsp.buf.hover()<CR>', {noremap = true, silent = true})
    vim.api.nvim_buf_set_keymap(bufnr, 'i', ',s', '<cmd>lua vim.lsp.buf.signature_help()<CR>', {noremap = true, silent = true})
  end,
}
lspconfig.tailwinds.setup {}
lspconfig.gopls.setup {}
lspconfig.htmx.setup {}
lspconfig.clangd.setup {
  root_dir = function(fname)
    return require("lspconfig.util").root_pattern(
      "Makefile",
      "configure.ac",
      "configure.in",
      "config.h.in",
      "meson.build",
      "meson_options.txt",
      "build.ninja"
    )(fname) or
    require("lspconfig.util").root_pattern("compile_commands.json", "compile_flags.txt")(fname) or
    require("lspconfig.util").find_git_ancestor(fname)
  end,
  capabilities = {
    offsetEncoding = { "utf-16" },
  },
  cmd = {
    "clangd",
    "--background-index",
    "--clang-tidy",
    "--header-insertion=iwyu",
    "--completion-style=detailed",
    "--function-arg-placeholders",
    "-j4",
    "--fallback-style=llvm",
  },
  init_options = {
    usePlaceholders = true,
    completeUnimported = true,
    clangdFileStatus = true,
  },
}
lspconfig.rust_analyzer.setup {
  settings = {
    ['rust-analyzer'] = {},
  },
}
# File: ./master.txt
