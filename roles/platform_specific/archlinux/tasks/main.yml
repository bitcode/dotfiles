---
# Arch Linux platform-specific setup tasks
- name: Display software inventory
  debug:
    msg: |
      === Arch Linux Development Environment Software Inventory ===
      Pacman Packages: {{ pacman_packages | join(', ') }}
      AUR Packages: {{ aur_packages | join(', ') }}
      Development Packages: {{ dev_packages | join(', ') }}
      Window Manager Packages: {{ wm_packages | join(', ') }}
      Font Packages: {{ font_packages | join(', ') }}
      System Packages: {{ system_packages | join(', ') }}
      NPM Global Packages: {{ npm_global_packages | join(', ') }}
      Python Packages: {{ python_packages | join(', ') }}
      Cargo Packages: {{ cargo_packages | join(', ') }}
      ================================================================

# === SYSTEM UPDATE ===
- name: Update package database
  pacman:
    update_cache: yes
  become: yes

- name: Upgrade all packages
  pacman:
    upgrade: yes
  become: yes
  when: arch_full_upgrade | default(false)

# === PACMAN PACKAGES ===
- name: Check which pacman packages are already installed
  shell: pacman -Q {{ item }} 2>/dev/null
  register: pacman_package_check
  failed_when: false
  changed_when: false
  loop: "{{ pacman_packages }}"

- name: Display pacman package status
  debug:
    msg: "{{ item.item }}: {{ 'INSTALLED' if item.rc == 0 else 'MISSING' }}"
  loop: "{{ pacman_package_check.results }}"

- name: Install missing pacman packages
  pacman:
    name: "{{ item.item }}"
    state: present
  become: yes
  when: item.rc != 0
  loop: "{{ pacman_package_check.results }}"
  register: pacman_install_result

- name: Verify pacman packages installation
  shell: pacman -Q {{ item.item.item }} 2>/dev/null
  register: pacman_verify_check
  failed_when: false
  changed_when: false
  loop: "{{ pacman_package_check.results }}"
  when: item.rc != 0

- name: Display pacman installation verification
  debug:
    msg: "{{ item.item.item }}: {{ 'SUCCESSFULLY INSTALLED' if item.rc == 0 else 'INSTALLATION FAILED' }}"
  loop: "{{ pacman_verify_check.results }}"
  when: pacman_verify_check.results is defined

# === DEVELOPMENT PACKAGES ===
- name: Install development packages
  pacman:
    name: "{{ dev_packages }}"
    state: present
  become: yes

# === DEVELOPMENT TOOLS VERIFICATION ===
- name: Verify essential development tools are accessible
  shell: "{{ item.command }}"
  register: essential_tools_verify
  failed_when: false
  changed_when: false
  loop:
    - { name: "gdb", command: "gdb --version" }
    - { name: "ripgrep", command: "rg --version" }
    - { name: "fd", command: "fd --version" }
    - { name: "fzf", command: "fzf --version" }

- name: Display essential development tools verification status
  debug:
    msg: "🔧 {{ item.item.name }}: {{ '✅ ACCESSIBLE' if item.rc == 0 else '❌ NOT ACCESSIBLE' }}"
  loop: "{{ essential_tools_verify.results }}"
  when: essential_tools_verify.results is defined

# === WINDOW MANAGER PACKAGES ===
- name: Install window manager packages
  pacman:
    name: "{{ wm_packages }}"
    state: present
  become: yes
  when: install_window_managers | default(true)

# === FONT PACKAGES ===
- name: Install font packages
  pacman:
    name: "{{ font_packages }}"
    state: present
  become: yes

# === SYSTEM PACKAGES ===
- name: Install system utility packages
  pacman:
    name: "{{ system_packages }}"
    state: present
  become: yes

# === AUR HELPER SETUP ===
- name: Check if AUR helper is installed
  command: which {{ aur_helper }}
  register: aur_helper_check
  failed_when: false
  changed_when: false

- name: Install AUR helper (yay)
  block:
    - name: Clone yay repository
      git:
        repo: https://aur.archlinux.org/yay.git
        dest: "{{ ansible_user_dir }}/src/yay"
        force: yes
      become: no

    - name: Build and install yay
      shell: |
        cd {{ ansible_user_dir }}/src/yay
        makepkg -si --noconfirm
      become: no
      args:
        creates: /usr/bin/yay
  when: 
    - aur_helper == "yay"
    - aur_helper_check.rc != 0

# === AUR PACKAGES ===
- name: Check which AUR packages are already installed
  shell: pacman -Q {{ item }} 2>/dev/null
  register: aur_package_check
  failed_when: false
  changed_when: false
  loop: "{{ aur_packages }}"
  when: aur_helper_check.rc == 0 or aur_helper == "yay"

- name: Display AUR package status
  debug:
    msg: "{{ item.item }}: {{ 'INSTALLED' if item.rc == 0 else 'MISSING' }}"
  loop: "{{ aur_package_check.results }}"
  when: aur_package_check.results is defined

- name: Install missing AUR packages
  shell: "{{ aur_helper }} -S --noconfirm {{ item.item }}"
  when:
    - aur_helper_check.rc == 0 or aur_helper == "yay"
    - aur_package_check.results is defined
    - item.rc != 0
  loop: "{{ aur_package_check.results }}"
  become: no
  register: aur_install_result

- name: Verify AUR packages installation
  shell: pacman -Q {{ item.item.item }} 2>/dev/null
  register: aur_verify_check
  failed_when: false
  changed_when: false
  loop: "{{ aur_package_check.results }}"
  when:
    - aur_package_check.results is defined
    - item.rc != 0

- name: Display AUR installation verification
  debug:
    msg: "{{ item.item.item }}: {{ 'SUCCESSFULLY INSTALLED' if item.rc == 0 else 'INSTALLATION FAILED' }}"
  loop: "{{ aur_verify_check.results }}"
  when: aur_verify_check.results is defined

# === NODE.JS AND NPM GLOBAL PACKAGES ===
- name: Check if Node.js is installed
  command: node --version
  register: node_version_check
  failed_when: false
  changed_when: false

- name: Display Node.js status
  debug:
    msg: "Node.js: {{ 'INSTALLED (' + node_version_check.stdout.strip() + ')' if node_version_check.rc == 0 else 'MISSING' }}"

- name: Check which npm global packages are already installed
  shell: npm list -g --depth=0 {{ item }} 2>/dev/null
  register: npm_package_check
  failed_when: false
  changed_when: false
  loop: "{{ npm_global_packages }}"
  when: node_version_check.rc == 0

- name: Display npm package status
  debug:
    msg: "{{ item.item }}: {{ 'INSTALLED' if item.rc == 0 else 'MISSING' }}"
  loop: "{{ npm_package_check.results }}"
  when: node_version_check.rc == 0 and npm_package_check.results is defined

- name: Install missing npm global packages
  npm:
    name: "{{ item.item }}"
    global: yes
    state: present
  when:
    - node_version_check.rc == 0
    - npm_package_check.results is defined
    - item.rc != 0
  loop: "{{ npm_package_check.results }}"
  become: no
  register: npm_install_result

- name: Verify npm global packages installation
  shell: npm list -g --depth=0 {{ item.item.item }} 2>/dev/null
  register: npm_verify_check
  failed_when: false
  changed_when: false
  loop: "{{ npm_package_check.results }}"
  when:
    - node_version_check.rc == 0
    - npm_package_check.results is defined
    - item.rc != 0

- name: Display npm installation verification
  debug:
    msg: "{{ item.item.item.item }}: {{ 'SUCCESSFULLY INSTALLED' if item.rc == 0 else 'INSTALLATION FAILED' }}"
  loop: "{{ npm_verify_check.results }}"
  when: npm_verify_check.results is defined

- name: Display final npm global packages summary
  shell: npm list -g --depth=0
  register: npm_global_list
  failed_when: false
  changed_when: false
  when: node_version_check.rc == 0

- name: Show npm global packages count
  debug:
    msg: "NPM Global Packages Installed: {{ npm_global_list.stdout_lines | select('match', '.*@.*') | list | length }} packages"
  when: node_version_check.rc == 0 and npm_global_list.stdout is defined

# === PYTHON DEVELOPMENT TOOLS ===
- name: Check if Python 3 is installed
  command: python3 --version
  register: python3_version_check
  failed_when: false
  changed_when: false

- name: Display Python 3 status
  debug:
    msg: "Python 3: {{ 'INSTALLED (' + python3_version_check.stdout.strip() + ')' if python3_version_check.rc == 0 else 'MISSING' }}"

- name: Check if pip3 is working properly
  shell: python3 -m pip --version
  register: pip3_check
  failed_when: false
  changed_when: false
  when: python3_version_check.rc == 0

- name: Display pip3 status
  debug:
    msg: "pip3: {{ 'WORKING' if pip3_check.rc == 0 else 'NOT WORKING' }}"
  when: python3_version_check.rc == 0

- name: Check if pipx is already installed
  shell: pipx --version
  register: pipx_check
  failed_when: false
  changed_when: false
  when: python3_version_check.rc == 0

- name: Display pipx status
  debug:
    msg: "pipx: {{ 'INSTALLED' if pipx_check.rc == 0 else 'MISSING' }}"
  when: python3_version_check.rc == 0

- name: Install pipx via pip3
  pip:
    name: pipx
    state: present
    extra_args: --user
  become: no
  when:
    - python3_version_check.rc == 0
    - pip3_check.rc == 0
    - pipx_check.rc != 0
  register: pipx_install_result

- name: Configure pipx environment
  shell: |
    export PATH="$HOME/.local/bin:$PATH"
    pipx ensurepath --force
  when:
    - python3_version_check.rc == 0
    - pip3_check.rc == 0
    - (pipx_check.rc != 0 or pipx_install_result is defined)
  register: pipx_config_result
  failed_when: false

- name: Verify pipx installation
  shell: |
    export PATH="$HOME/.local/bin:$PATH"
    pipx --version
  register: pipx_verify
  failed_when: false
  changed_when: false
  when:
    - python3_version_check.rc == 0
    - pip3_check.rc == 0

- name: Display pipx verification status
  debug:
    msg: "pipx verification: {{ 'SUCCESS' if pipx_verify.rc == 0 else 'FAILED' }}"
  when:
    - python3_version_check.rc == 0
    - pip3_check.rc == 0

- name: Check which pipx packages are already installed
  shell: |
    export PATH="$HOME/.local/bin:$PATH"
    pipx list | grep "{{ item }}" || echo "NOT_FOUND"
  register: pipx_package_check
  failed_when: false
  changed_when: false
  loop:
    - community-ansible-dev-tools
    - ansible-lint
  when:
    - python3_version_check.rc == 0
    - pipx_verify.rc == 0

- name: Display pipx package status
  debug:
    msg: "{{ item.item }}: {{ 'INSTALLED' if 'NOT_FOUND' not in item.stdout else 'MISSING' }}"
  loop: "{{ pipx_package_check.results }}"
  when:
    - python3_version_check.rc == 0
    - pipx_verify.rc == 0
    - pipx_package_check.results is defined

- name: Install missing pipx packages
  shell: |
    export PATH="$HOME/.local/bin:$PATH"
    pipx install {{ item.item }}
  when:
    - python3_version_check.rc == 0
    - pipx_verify.rc == 0
    - pipx_package_check.results is defined
    - "'NOT_FOUND' in item.stdout"
  loop: "{{ pipx_package_check.results }}"
  register: pipx_install_packages

- name: Verify pipx packages installation
  shell: |
    export PATH="$HOME/.local/bin:$PATH"
    {{ item }} --version 2>/dev/null || echo "COMMAND_NOT_FOUND"
  register: pipx_tools_verify
  failed_when: false
  changed_when: false
  loop:
    - community-ansible-dev-tools
    - ansible-lint
  when:
    - python3_version_check.rc == 0
    - pipx_verify.rc == 0

- name: Display pipx tools verification
  debug:
    msg: "{{ item.item }}: {{ 'ACCESSIBLE' if 'COMMAND_NOT_FOUND' not in item.stdout else 'NOT_IN_PATH' }}"
  loop: "{{ pipx_tools_verify.results }}"
  when:
    - python3_version_check.rc == 0
    - pipx_verify.rc == 0
    - pipx_tools_verify.results is defined

# === PYTHON PACKAGES ===
- name: Install Python packages
  pip:
    name: "{{ python_packages }}"
    state: present
    extra_args: --user
  become: no

# === RUST AND CARGO PACKAGES ===
- name: Check if Rust is installed
  command: rustc --version
  register: rust_version_check
  failed_when: false
  changed_when: false

- name: Install Rust toolchain if not present
  shell: |
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source {{ ansible_user_dir }}/.cargo/env
  when: rust_version_check.rc != 0
  become: no

- name: Install Cargo packages
  shell: cargo install {{ item }}
  loop: "{{ cargo_packages }}"
  when: rust_version_check.rc == 0
  become: no
  register: cargo_install_result
  failed_when: false

# === GO PACKAGES ===
- name: Check if Go is available for go packages
  shell: go version
  register: go_available_check
  failed_when: false
  changed_when: false

- name: Display Go availability status
  debug:
    msg: "🐹 Go: {{ 'AVAILABLE (' + go_available_check.stdout.strip() + ')' if go_available_check.rc == 0 else 'NOT AVAILABLE' }}"

- name: Check which go packages are already installed
  shell: |
    package_name=$(echo "{{ item }}" | sed 's/@latest$//' | sed 's/.*\///')
    go list -m all 2>/dev/null | grep "{{ item.split('@')[0] }}" || echo "NOT_FOUND"
  register: go_package_check
  failed_when: false
  changed_when: false
  loop: "{{ go_packages }}"
  when: go_available_check.rc == 0

- name: Display go package status
  debug:
    msg: "🐹 {{ item.item }}: {{ '✅ INSTALLED' if 'NOT_FOUND' not in item.stdout else '❌ MISSING' }}"
  loop: "{{ go_package_check.results }}"
  when:
    - go_available_check.rc == 0
    - go_package_check.results is defined
    - "'NOT_FOUND' in item.stdout"  # Only show missing packages

- name: Install missing go packages
  shell: go install {{ item.item }}
  when:
    - go_available_check.rc == 0
    - go_package_check.results is defined
    - "'NOT_FOUND' in item.stdout"
  loop: "{{ go_package_check.results }}"
  register: go_install_result
  environment:
    GOPATH: "{{ ansible_user_dir }}/go"
    GOBIN: "{{ ansible_user_dir }}/go/bin"

- name: Go packages summary
  debug:
    msg: |
      🐹 Go Packages Summary:
      • Total packages: {{ go_packages | length }}
      • Already installed: {{ go_package_check.results | selectattr('stdout', 'not containing', 'NOT_FOUND') | list | length if go_package_check.results is defined else 0 }}
      • Newly installed: {{ go_package_check.results | selectattr('stdout', 'containing', 'NOT_FOUND') | list | length if go_package_check.results is defined else 0 }}
      • Tools installed in: ~/go/bin/
  when: go_available_check.rc == 0

# === SYSTEMD SERVICES ===
- name: Enable systemd services
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop: "{{ systemd_services }}"
  become: yes
  failed_when: false

# === DEVELOPMENT DIRECTORIES ===
- name: Create development directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop: "{{ development_directories }}"

# === ENVIRONMENT VARIABLES ===
- name: Set environment variables in .bashrc
  lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    line: 'export {{ item.name }}="{{ item.value }}"'
    create: yes
  loop: "{{ arch_environment_vars }}"

- name: Set environment variables in .zshrc
  lineinfile:
    path: "{{ ansible_user_dir }}/.zshrc"
    line: 'export {{ item.name }}="{{ item.value }}"'
    create: yes
  loop: "{{ arch_environment_vars }}"

# === FINAL ARCH LINUX PLATFORM SUMMARY ===
- name: Arch Linux platform setup completed
  debug:
    msg: |
      ✅ Arch Linux platform setup completed successfully!

      Software inventory managed:
      • Pacman packages: {{ pacman_packages | length }}
      • AUR packages: {{ aur_packages | length }}
      • Development packages: {{ dev_packages | length }}
      • Window manager packages: {{ wm_packages | length }}
      • Font packages: {{ font_packages | length }}
      • System packages: {{ system_packages | length }}
      • NPM global packages: {{ npm_global_packages | length }}
      • Python dev tools: pipx, community-ansible-dev-tools, ansible-lint
      • Python packages: {{ python_packages | length }}
      • Cargo packages: {{ cargo_packages | length }}
      • Go packages: {{ go_packages | length }}

      All idempotent checks implemented for Arch Linux platform
