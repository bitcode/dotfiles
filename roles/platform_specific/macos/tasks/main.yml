---
# macOS platform-specific setup tasks extracted from macsible.yaml
- name: macOS platform setup initialization
  debug:
    msg: |
      🍎 macOS Platform Configuration Starting
      ========================================
      • Homebrew packages: {{ homebrew_packages | length }} packages
      • Development tools: {{ development_tools | length }} tools
      • Homebrew casks: {{ homebrew_casks | length }} applications
      • Mac App Store apps: {{ mac_app_store_apps | length }} applications
      • Manual installations: {{ manual_installations | length }} tools
      • NPM global packages: {{ npm_global_packages | length }} packages
      • Cargo packages: {{ cargo_packages | length }} packages
      • Go packages: {{ go_packages | length }} packages
      • Python dev packages: {{ python_dev_packages | length }} packages
      • Node.js dev packages: {{ node_dev_packages | length }} packages
      ========================================

# === SYSTEM PREREQUISITES ===
- name: Check if Xcode Command Line Tools are installed
  shell: xcode-select -p 2>/dev/null
  register: xcode_tools_installed
  failed_when: false
  changed_when: false

- name: Install Xcode Command Line Tools
  shell: xcode-select --install 2>&1 || true
  when: xcode_tools_installed.rc != 0
  register: xcode_install_result
  failed_when: false

- name: Check if Homebrew is installed
  shell: command -v brew >/dev/null 2>&1
  register: homebrew_installed
  failed_when: false
  changed_when: false

- name: Install Homebrew
  shell: |
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  when: homebrew_installed.rc != 0
  environment:
    NONINTERACTIVE: 1

- name: Check if Rosetta 2 is needed (Apple Silicon)
  shell: uname -m
  register: cpu_arch
  changed_when: false

- name: Check if Rosetta 2 is installed
  shell: /usr/bin/pgrep oahd >/dev/null 2>&1
  register: rosetta_installed
  failed_when: false
  changed_when: false
  when: cpu_arch.stdout == "arm64"

- name: Install Rosetta 2 for Apple Silicon
  shell: softwareupdate --install-rosetta --agree-to-license
  when:
    - cpu_arch.stdout == "arm64"
    - rosetta_installed.rc != 0

# === HOMEBREW PACKAGES ===
- name: Check which Homebrew packages are already installed
  shell: brew list {{ item }} 2>/dev/null
  register: homebrew_package_check
  failed_when: false
  changed_when: false
  loop: "{{ homebrew_packages }}"

- name: Display Homebrew package status
  debug:
    msg: "{{ item.item }}: {{ 'INSTALLED' if item.rc == 0 else 'MISSING' }}"
  loop: "{{ homebrew_package_check.results }}"
  when: item.rc != 0  # Only show missing packages to reduce output

- name: Install missing Homebrew packages
  community.general.homebrew:
    name: "{{ item.item }}"
    state: present
  when: item.rc != 0
  loop: "{{ homebrew_package_check.results }}"

- name: Homebrew packages summary
  debug:
    msg: |
      📦 Homebrew Packages Summary:
      • Total packages: {{ homebrew_packages | length }}
      • Already installed: {{ homebrew_package_check.results | selectattr('rc', 'equalto', 0) | list | length }}
      • Newly installed: {{ homebrew_package_check.results | selectattr('rc', 'ne', 0) | list | length }}

# === DEVELOPMENT TOOLS ===
- name: Check which development tools are already installed
  shell: brew list {{ item }} 2>/dev/null
  register: dev_tools_check
  failed_when: false
  changed_when: false
  loop: "{{ development_tools }}"

- name: Display development tools status
  debug:
    msg: "🔧 {{ item.item }}: {{ '✅ INSTALLED' if item.rc == 0 else '❌ MISSING' }}"
  loop: "{{ dev_tools_check.results }}"
  when: item.rc != 0  # Only show missing tools to reduce output

- name: Install missing development tools
  community.general.homebrew:
    name: "{{ item.item }}"
    state: present
  when: item.rc != 0
  loop: "{{ dev_tools_check.results }}"
  register: dev_tools_install_result

- name: Development tools summary
  debug:
    msg: |
      🔧 Development Tools Summary:
      • Total tools: {{ development_tools | length }}
      • Already installed: {{ dev_tools_check.results | selectattr('rc', 'equalto', 0) | list | length }}
      • Newly installed: {{ dev_tools_check.results | selectattr('rc', 'ne', 0) | list | length }}

      Categories installed:
      • Core compilers: GCC, Clang/LLVM, Rust, Go, Zig
      • Assemblers: NASM, YASM
      • Build systems: CMake, Ninja, Meson, Bazel
      • Debug tools: GDB, LLDB, Valgrind

# === HOMEBREW CASKS ===
- name: Check which Homebrew casks are already installed
  shell: brew list --cask {{ item }} 2>/dev/null
  register: homebrew_cask_check
  failed_when: false
  changed_when: false
  loop: "{{ homebrew_casks }}"

- name: Display Homebrew cask status
  debug:
    msg: "{{ item.item }}: {{ 'INSTALLED' if item.rc == 0 else 'MISSING' }}"
  loop: "{{ homebrew_cask_check.results }}"
  when: item.rc != 0  # Only show missing casks to reduce output

- name: Install missing Homebrew casks
  community.general.homebrew_cask:
    name: "{{ item.item }}"
    state: present
    accept_external_apps: true
  when: item.rc != 0
  loop: "{{ homebrew_cask_check.results }}"
  register: homebrew_cask_install_result
  retries: 3
  delay: 10
  until: homebrew_cask_install_result is succeeded
  failed_when: false  # Don't fail immediately, let us handle errors

- name: Report Homebrew cask installation failures
  debug:
    msg: |
      ❌ Failed to install cask: {{ item.item.item }}
      Error: {{ item.msg | default('Unknown error') }}
      {% if item.stderr is defined and item.stderr %}
      stderr: {{ item.stderr }}
      {% endif %}
      {% if item.stdout is defined and item.stdout %}
      stdout: {{ item.stdout }}
      {% endif %}
  loop: "{{ homebrew_cask_install_result.results | default([]) }}"
  when:
    - homebrew_cask_install_result.results is defined
    - item.failed | default(false)

- name: Fail if critical casks could not be installed
  fail:
    msg: |
      Critical Homebrew casks failed to install. See errors above.
      Failed casks: {{ homebrew_cask_install_result.results | selectattr('failed', 'defined') | selectattr('failed') | map(attribute='item.item') | list | join(', ') }}
  when:
    - homebrew_cask_install_result.results is defined
    - homebrew_cask_install_result.results | selectattr('failed', 'defined') | selectattr('failed') | list | length > 0

- name: Homebrew casks summary
  debug:
    msg: |
      🍺 Homebrew Casks Summary:
      • Total casks: {{ homebrew_casks | length }}
      • Already installed: {{ homebrew_cask_check.results | selectattr('rc', 'equalto', 0) | list | length }}
      • Newly installed: {{ homebrew_cask_check.results | selectattr('rc', 'ne', 0) | list | length }}

# === MANUAL INSTALLATIONS ===
- name: Check if Rust is installed
  shell: rustc --version
  register: rust_check
  failed_when: false
  changed_when: false

- name: Install Rust
  shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  when: rust_check.rc != 0
  environment:
    CARGO_HOME: "{{ ansible_env.HOME }}/.cargo"
    RUSTUP_HOME: "{{ ansible_env.HOME }}/.rustup"

# === NODE VERSION MANAGER (NVM) INSTALLATION ===
- name: Check if Node Version Manager (nvm) is installed
  stat:
    path: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
  register: nvm_installed

- name: Install Node Version Manager (nvm)
  shell: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
  when: not nvm_installed.stat.exists

- name: Check if nvm configuration exists in .zshrc
  shell: grep -q "NVM_DIR" "{{ ansible_env.HOME }}/.zshrc" 2>/dev/null
  register: nvm_config_exists
  failed_when: false
  changed_when: false

- name: Create .zshrc if it doesn't exist
  file:
    path: "{{ ansible_env.HOME }}/.zshrc"
    state: touch
    mode: '0644'
  when: nvm_config_exists.rc != 0

- name: Add nvm configuration to .zshrc
  blockinfile:
    path: "{{ ansible_env.HOME }}/.zshrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - NVM Configuration"
    block: |
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    create: yes
  when: nvm_config_exists.rc != 0

- name: Source .zshrc to load nvm in current session
  shell: |
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm --version
  register: nvm_version_check
  failed_when: false
  changed_when: false
  when: nvm_installed.stat.exists or not nvm_installed.stat.exists

- name: Display nvm installation status
  debug:
    msg: "🟢 Node Version Manager: {{ 'INSTALLED' if nvm_version_check.rc == 0 else 'MISSING' }} {{ '(v' + nvm_version_check.stdout + ')' if nvm_version_check.rc == 0 else '' }}"

# === NODE.JS AND NPM GLOBAL PACKAGES ===
- name: Install latest LTS Node.js via nvm
  shell: |
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm install --lts
    nvm use --lts
    nvm alias default lts/*
  when: nvm_version_check.rc == 0
  register: node_install_result
  changed_when: "'already installed' not in node_install_result.stdout"

- name: Check which npm global packages are already installed
  shell: |
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    npm list -g --depth=0 {{ item }} 2>/dev/null
  register: npm_package_check
  failed_when: false
  changed_when: false
  loop: "{{ npm_global_packages }}"
  when: nvm_version_check.rc == 0

- name: Display npm package status
  debug:
    msg: "{{ item.item }}: {{ 'INSTALLED' if item.rc == 0 else 'MISSING' }}"
  loop: "{{ npm_package_check.results }}"
  when:
    - nvm_version_check.rc == 0
    - npm_package_check.results is defined
    - item.rc != 0  # Only show missing packages

- name: Install missing npm global packages
  shell: |
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    npm install -g {{ item.item }}
  when:
    - nvm_version_check.rc == 0
    - npm_package_check.results is defined
    - item.rc != 0
  loop: "{{ npm_package_check.results }}"

- name: Verify npm global packages installation
  shell: |
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    npm list -g --depth=0
  register: npm_global_list
  failed_when: false
  changed_when: false
  when: nvm_version_check.rc == 0

- name: NPM global packages summary
  debug:
    msg: |
      📦 NPM Global Packages Summary:
      • Total packages: {{ npm_global_packages | length }}
      • Successfully installed: {{ npm_global_list.stdout_lines | select('match', '.*@.*') | list | length }} packages
  when: nvm_version_check.rc == 0 and npm_global_list.stdout is defined

# === PYTHON DEVELOPMENT TOOLS ===
- name: Check if pip3 is working properly
  shell: python3 -m pip --version
  register: pip3_check
  failed_when: false
  changed_when: false

- name: Check if pipx is already installed
  shell: pipx --version
  register: pipx_check
  failed_when: false
  changed_when: false

- name: Python development tools status
  debug:
    msg: |
      🐍 Python Development Tools:
      • pip3: {{ 'WORKING' if pip3_check.rc == 0 else 'NOT WORKING' }}
      • pipx: {{ 'INSTALLED' if pipx_check.rc == 0 else 'MISSING' }}

- name: Install pipx via pip3
  shell: python3 -m pip install --user pipx
  when:
    - pip3_check.rc == 0
    - pipx_check.rc != 0
  register: pipx_install_result

- name: Configure pipx environment
  shell: |
    export PATH="$HOME/.local/bin:$PATH"
    pipx ensurepath --force
  when:
    - pip3_check.rc == 0
    - (pipx_check.rc != 0 or pipx_install_result is defined)
  register: pipx_config_result
  failed_when: false

- name: Verify pipx installation
  shell: |
    export PATH="$HOME/.local/bin:$PATH"
    pipx --version
  register: pipx_verify
  failed_when: false
  changed_when: false
  when: pip3_check.rc == 0

- name: Check which pipx packages are already installed
  shell: |
    export PATH="$HOME/.local/bin:$PATH"
    pipx list | grep "{{ item }}" || echo "NOT_FOUND"
  register: pipx_package_check
  failed_when: false
  changed_when: false
  loop:
    - community-ansible-dev-tools
    - ansible-lint
  when: pipx_verify.rc == 0

- name: Display pipx package status
  debug:
    msg: "{{ item.item }}: {{ 'INSTALLED' if 'NOT_FOUND' not in item.stdout else 'MISSING' }}"
  loop: "{{ pipx_package_check.results }}"
  when:
    - pipx_verify.rc == 0
    - pipx_package_check.results is defined
    - "'NOT_FOUND' in item.stdout"  # Only show missing packages

- name: Install missing pipx packages
  shell: |
    export PATH="$HOME/.local/bin:$PATH"
    pipx install {{ item.item }}
  when:
    - pipx_verify.rc == 0
    - pipx_package_check.results is defined
    - "'NOT_FOUND' in item.stdout"
  loop: "{{ pipx_package_check.results }}"
  register: pipx_install_packages

- name: Verify pipx packages installation
  shell: |
    export PATH="$HOME/.local/bin:$PATH"
    {{ item }} --version 2>/dev/null || echo "COMMAND_NOT_FOUND"
  register: pipx_tools_verify
  failed_when: false
  changed_when: false
  loop:
    - community-ansible-dev-tools
    - ansible-lint
  when: pipx_verify.rc == 0

- name: Pipx tools summary
  debug:
    msg: |
      🔧 Pipx Development Tools Summary:
      • community-ansible-dev-tools: {{ 'ACCESSIBLE' if pipx_tools_verify.results[0].stdout and 'COMMAND_NOT_FOUND' not in pipx_tools_verify.results[0].stdout else 'NOT_IN_PATH' }}
      • ansible-lint: {{ 'ACCESSIBLE' if pipx_tools_verify.results[1].stdout and 'COMMAND_NOT_FOUND' not in pipx_tools_verify.results[1].stdout else 'NOT_IN_PATH' }}
  when: pipx_verify.rc == 0 and pipx_tools_verify.results is defined

# === PYTHON DEVELOPMENT PACKAGES ===
- name: Check which Python development packages are already installed via pipx
  shell: |
    export PATH="$HOME/.local/bin:$PATH"
    pipx list | grep "{{ item }}" || echo "NOT_FOUND"
  register: python_dev_package_check
  failed_when: false
  changed_when: false
  loop: "{{ python_dev_packages }}"
  when: pipx_verify.rc == 0

- name: Display Python development package status
  debug:
    msg: "🐍 {{ item.item }}: {{ '✅ INSTALLED' if 'NOT_FOUND' not in item.stdout else '❌ MISSING' }}"
  loop: "{{ python_dev_package_check.results }}"
  when:
    - pipx_verify.rc == 0
    - python_dev_package_check.results is defined
    - "'NOT_FOUND' in item.stdout"  # Only show missing packages

- name: Install missing Python development packages via pipx
  shell: |
    export PATH="$HOME/.local/bin:$PATH"
    pipx install {{ item.item }}
  when:
    - pipx_verify.rc == 0
    - python_dev_package_check.results is defined
    - "'NOT_FOUND' in item.stdout"
  loop: "{{ python_dev_package_check.results }}"
  register: python_dev_install_result

- name: Python development packages summary
  debug:
    msg: |
      🐍 Python Development Packages Summary:
      • Total packages: {{ python_dev_packages | length }}
      • Already installed: {{ python_dev_package_check.results | selectattr('stdout', 'not containing', 'NOT_FOUND') | list | length if python_dev_package_check.results is defined else 0 }}
      • Newly installed: {{ python_dev_package_check.results | selectattr('stdout', 'containing', 'NOT_FOUND') | list | length if python_dev_package_check.results is defined else 0 }}

      Tools available:
      • Code formatting: black, flake8, mypy
      • Testing: pytest
      • Environment: poetry, pipenv, virtualenv
      • Automation: pre-commit, cookiecutter
  when: pipx_verify.rc == 0

# === GO INSTALLATION ===
- name: Check if Go is available in PATH
  shell: go version 2>/dev/null
  register: go_path_check
  failed_when: false
  changed_when: false

- name: Check if Go is installed via Homebrew
  shell: brew list go 2>/dev/null
  register: go_homebrew_check
  failed_when: false
  changed_when: false

- name: Display Go installation status
  debug:
    msg: "🐹 Go: {{ '✅ INSTALLED (' + go_path_check.stdout.strip() + ')' if go_path_check.rc == 0 else '❌ NOT INSTALLED' }}"

- name: Install Go via Homebrew (preferred method)
  homebrew:
    name: go
    state: present
  when:
    - go_path_check.rc != 0
    - go_homebrew_check.rc != 0
  register: go_homebrew_install

- name: Verify Go installation after Homebrew install
  shell: go version 2>/dev/null
  register: go_verify_homebrew
  failed_when: false
  changed_when: false
  when: go_homebrew_install is defined and go_homebrew_install.changed

- name: Fallback - Manual Go installation if Homebrew fails
  block:
    - name: Detect CPU architecture for Go download
      shell: uname -m
      register: cpu_arch_go
      changed_when: false

    - name: Set Go download URL based on architecture (latest stable version)
      set_fact:
        go_download_url: "https://go.dev/dl/go1.24.4.darwin-{{ 'arm64' if cpu_arch_go.stdout == 'arm64' else 'amd64' }}.pkg"

    - name: Download Go installer
      get_url:
        url: "{{ go_download_url }}"
        dest: "/tmp/go-installer.pkg"
        mode: '0644'
        timeout: 60

    - name: Install Go from PKG
      shell: sudo installer -pkg /tmp/go-installer.pkg -target /
      become: yes

    - name: Clean up Go installer
      file:
        path: "/tmp/go-installer.pkg"
        state: absent

    - name: Add Go to PATH in shell profiles (manual installation)
      lineinfile:
        path: "{{ item }}"
        line: 'export PATH="/usr/local/go/bin:$PATH"'
        create: yes
        backup: yes
      loop:
        - "{{ ansible_user_dir }}/.zshrc"
        - "{{ ansible_user_dir }}/.bash_profile"

  when:
    - go_path_check.rc != 0
    - (go_homebrew_install is not defined or go_homebrew_install.failed | default(false))

- name: Final Go installation verification
  shell: go version 2>/dev/null || /usr/local/go/bin/go version 2>/dev/null || /opt/homebrew/bin/go version 2>/dev/null
  register: go_final_check
  failed_when: false
  changed_when: false

- name: Display final Go installation result
  debug:
    msg: "🐹 Go Final Status: {{ '✅ INSTALLED (' + go_final_check.stdout.strip() + ')' if go_final_check.rc == 0 else '❌ INSTALLATION FAILED' }}"

# === CARGO PACKAGES (RUST) ===
- name: Check if Rust is available for cargo packages
  shell: cargo --version
  register: cargo_available_check
  failed_when: false
  changed_when: false

- name: Check which cargo packages are already installed
  shell: cargo install --list | grep "^{{ item }} "
  register: cargo_package_check
  failed_when: false
  changed_when: false
  loop: "{{ cargo_packages }}"
  when: cargo_available_check.rc == 0

- name: Display cargo package status
  debug:
    msg: "🦀 {{ item.item }}: {{ '✅ INSTALLED' if item.rc == 0 else '❌ MISSING' }}"
  loop: "{{ cargo_package_check.results }}"
  when:
    - cargo_available_check.rc == 0
    - cargo_package_check.results is defined
    - item.rc != 0  # Only show missing packages

- name: Install missing cargo packages
  shell: cargo install {{ item.item }}
  when:
    - cargo_available_check.rc == 0
    - cargo_package_check.results is defined
    - item.rc != 0
  loop: "{{ cargo_package_check.results }}"
  register: cargo_install_result

- name: Cargo packages summary
  debug:
    msg: |
      🦀 Cargo Packages Summary:
      • Total packages: {{ cargo_packages | length }}
      • Already installed: {{ cargo_package_check.results | selectattr('rc', 'equalto', 0) | list | length if cargo_package_check.results is defined else 0 }}
      • Newly installed: {{ cargo_package_check.results | selectattr('rc', 'ne', 0) | list | length if cargo_package_check.results is defined else 0 }}
  when: cargo_available_check.rc == 0

# === GO PACKAGES ===
- name: Check if Go is available for go packages
  shell: go version
  register: go_available_check
  failed_when: false
  changed_when: false

- name: Check which go packages are already installed
  shell: |
    package_name=$(echo "{{ item }}" | sed 's/@latest$//' | sed 's/.*\///')
    go list -m all 2>/dev/null | grep "{{ item.split('@')[0] }}" || echo "NOT_FOUND"
  register: go_package_check
  failed_when: false
  changed_when: false
  loop: "{{ go_packages }}"
  when: go_available_check.rc == 0

- name: Display go package status
  debug:
    msg: "🐹 {{ item.item }}: {{ '✅ INSTALLED' if 'NOT_FOUND' not in item.stdout else '❌ MISSING' }}"
  loop: "{{ go_package_check.results }}"
  when:
    - go_available_check.rc == 0
    - go_package_check.results is defined
    - "'NOT_FOUND' in item.stdout"  # Only show missing packages

- name: Install missing go packages
  shell: go install {{ item.item }}
  when:
    - go_available_check.rc == 0
    - go_package_check.results is defined
    - "'NOT_FOUND' in item.stdout"
  loop: "{{ go_package_check.results }}"
  register: go_install_result
  environment:
    GOPATH: "{{ ansible_env.HOME }}/go"
    GOBIN: "{{ ansible_env.HOME }}/go/bin"

- name: Go packages summary
  debug:
    msg: |
      🐹 Go Packages Summary:
      • Total packages: {{ go_packages | length }}
      • Installation attempted for missing packages
      • Tools installed in: ~/go/bin/
  when: go_available_check.rc == 0

# === ZELLIJ INSTALLATION ===
- name: Check if Zellij is installed
  shell: zellij --version
  register: zellij_check
  failed_when: false
  changed_when: false

- name: Install Zellij
  shell: bash <(curl -L https://zellij.dev/launch)
  when: zellij_check.rc != 0

# === MAC APP STORE APPLICATIONS ===
- name: Check Mac App Store applications
  stat:
    path: "{{ item.path }}"
  register: mac_app_store_check
  loop: "{{ mac_app_store_apps }}"

- name: Display Mac App Store app status
  debug:
    msg: "{{ item.item.name }}: {{ 'INSTALLED' if item.stat.exists else 'MISSING (install manually via App Store)' }}"
  loop: "{{ mac_app_store_check.results }}"

# === SYSTEM CONFIGURATION ===
- name: Check current Finder settings
  shell: |
    defaults read com.apple.finder AppleShowAllFiles 2>/dev/null || echo "false"
    defaults read com.apple.Finder AppleShowFilenameExtensions 2>/dev/null || echo "false"
  register: finder_settings
  changed_when: false

- name: Configure Finder settings
  shell: |
    defaults write com.apple.finder AppleShowAllFiles TRUE
    defaults write com.apple.Finder AppleShowFilenameExtensions -bool true
    killall Finder
  when: "'TRUE' not in finder_settings.stdout or 'true' not in finder_settings.stdout"

# === FINAL SOFTWARE INVENTORY REPORT ===
- name: macOS platform setup completed
  debug:
    msg: |
      ✅ macOS platform setup completed successfully!

      Software inventory managed:
      • Homebrew packages: {{ homebrew_packages | length }}
      • Development tools: {{ development_tools | length }}
      • Homebrew casks: {{ homebrew_casks | length }}
      • NPM global packages: {{ npm_global_packages | length }}
      • Cargo packages: {{ cargo_packages | length }}
      • Go packages: {{ go_packages | length }}
      • Python dev packages: {{ python_dev_packages | length }}
      • Node.js dev packages: {{ node_dev_packages | length }}
      • Mac App Store apps: {{ mac_app_store_apps | length }}
      • Manual installations: {{ manual_installations | length }}

      🔧 Development Environment Ready:
      • Core compilers: GCC, Clang/LLVM, Rust, Go, Zig, Crystal, Nim, D
      • Assemblers: NASM, YASM for cross-platform assembly
      • Build systems: CMake, Ninja, Meson, Bazel, Make, Autotools
      • Debug tools: GDB, LLDB, Valgrind
      • Language tools: Cargo, Go tools, Python dev stack, Node.js tools
      • Cross-compilation: ARM toolchains, MinGW for Windows

      All idempotent checks implemented following dotsible patterns
