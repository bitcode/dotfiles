-- ═══════════════════════════════════════════════════════════════
-- Neovim DAP GDB Configuration for Assembly Debugging
-- Generated by Dotsible - {{ ansible_date_time.iso8601 }}
-- Platform: {{ ansible_os_family }} {{ ansible_architecture }}
-- Profile: {{ profile | default('minimal') }}
-- ═══════════════════════════════════════════════════════════════

local dap = require('dap')

-- GDB Adapter Configuration
dap.adapters.gdb = {
    type = "executable",
    command = "gdb",
    args = { "--interpreter=dap", "--eval-command", "set print pretty on" }
}

-- Multi-architecture GDB adapters
{% if gdb_current_features.cross_compilation | default(false) %}
-- ARM64 Cross-compilation GDB
dap.adapters.gdb_arm64 = {
    type = "executable",
    command = "{{ gdb_cross_commands.arm64.gdb | default('aarch64-linux-gnu-gdb') }}",
    args = { "--interpreter=dap", "--eval-command", "set architecture aarch64" }
}

-- ARM32 Cross-compilation GDB
dap.adapters.gdb_arm32 = {
    type = "executable",
    command = "{{ gdb_cross_commands.arm32.gdb | default('arm-linux-gnueabihf-gdb') }}",
    args = { "--interpreter=dap", "--eval-command", "set architecture arm" }
}

-- RISC-V Cross-compilation GDB
dap.adapters.gdb_riscv = {
    type = "executable",
    command = "{{ gdb_cross_commands.riscv.gdb | default('riscv64-linux-gnu-gdb') }}",
    args = { "--interpreter=dap", "--eval-command", "set architecture riscv64" }
}

-- Multiarch GDB (Linux)
{% if ansible_os_family != "Darwin" %}
dap.adapters.gdb_multiarch = {
    type = "executable",
    command = "gdb-multiarch",
    args = { "--interpreter=dap", "--eval-command", "set print pretty on" }
}
{% endif %}
{% endif %}

-- Assembly debugging configurations
dap.configurations.asm = {
    {
        name = "Debug Assembly (Native)",
        type = "gdb",
        request = "launch",
        program = function()
            return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
        end,
        cwd = '${workspaceFolder}',
        stopAtBeginningOfMainSubprogram = false,
        setupCommands = {
            {
                text = "set architecture {{ gdb_architectures[ansible_architecture | default('arm64')].default_arch | default('aarch64') }}",
                description = "Set architecture to native",
                ignoreFailures = false
            },
            {
                text = "set print pretty on",
                description = "Enable pretty printing",
                ignoreFailures = false
            },
            {
                text = "set disassembly-flavor intel",
                description = "Set Intel disassembly syntax",
                ignoreFailures = true
            },
            {
                text = "source {{ gdb_config.init_file }}",
                description = "Load custom GDB configuration",
                ignoreFailures = true
            },
            {
                text = "layout split",
                description = "Set TUI layout",
                ignoreFailures = true
            }
        }
    },
{% if gdb_current_features.cross_compilation | default(false) %}
    {
        name = "Debug ARM64 Assembly",
        type = "gdb_arm64",
        request = "launch",
        program = function()
            return vim.fn.input('Path to ARM64 executable: ', vim.fn.getcwd() .. '/', 'file')
        end,
        cwd = '${workspaceFolder}',
        stopAtBeginningOfMainSubprogram = false,
        setupCommands = {
            {
                text = "set architecture aarch64",
                description = "Set architecture to ARM64",
                ignoreFailures = false
            },
            {
                text = "set print pretty on",
                description = "Enable pretty printing",
                ignoreFailures = false
            },
            {
                text = "source {{ gdb_config.init_file }}",
                description = "Load custom GDB configuration",
                ignoreFailures = true
            }
        }
    },
    {
        name = "Debug ARM32 Assembly",
        type = "gdb_arm32",
        request = "launch",
        program = function()
            return vim.fn.input('Path to ARM32 executable: ', vim.fn.getcwd() .. '/', 'file')
        end,
        cwd = '${workspaceFolder}',
        stopAtBeginningOfMainSubprogram = false,
        setupCommands = {
            {
                text = "set architecture arm",
                description = "Set architecture to ARM32",
                ignoreFailures = false
            },
            {
                text = "set print pretty on",
                description = "Enable pretty printing",
                ignoreFailures = false
            },
            {
                text = "source {{ gdb_config.init_file }}",
                description = "Load custom GDB configuration",
                ignoreFailures = true
            }
        }
    },
    {
        name = "Debug RISC-V Assembly",
        type = "gdb_riscv",
        request = "launch",
        program = function()
            return vim.fn.input('Path to RISC-V executable: ', vim.fn.getcwd() .. '/', 'file')
        end,
        cwd = '${workspaceFolder}',
        stopAtBeginningOfMainSubprogram = false,
        setupCommands = {
            {
                text = "set architecture riscv64",
                description = "Set architecture to RISC-V",
                ignoreFailures = false
            },
            {
                text = "set print pretty on",
                description = "Enable pretty printing",
                ignoreFailures = false
            },
            {
                text = "source {{ gdb_config.init_file }}",
                description = "Load custom GDB configuration",
                ignoreFailures = true
            }
        }
    },
{% endif %}
    {
        name = "Attach to Process",
        type = "gdb",
        request = "attach",
        pid = function()
            return vim.fn.input('Process ID: ')
        end,
        cwd = '${workspaceFolder}',
        setupCommands = {
            {
                text = "set architecture {{ gdb_architectures[ansible_architecture | default('arm64')].default_arch | default('aarch64') }}",
                description = "Set architecture",
                ignoreFailures = false
            },
            {
                text = "source {{ gdb_config.init_file }}",
                description = "Load custom GDB configuration",
                ignoreFailures = true
            }
        }
    },
{% if gdb_current_features.multi_architecture | default(false) %}
    {
        name = "Debug with QEMU (ARM64)",
        type = "gdb",
        request = "launch",
        program = function()
            return vim.fn.input('Path to ARM64 executable: ', vim.fn.getcwd() .. '/', 'file')
        end,
        cwd = '${workspaceFolder}',
        miDebuggerPath = "gdb-multiarch",
        miDebuggerServerAddress = "localhost:1234",
        setupCommands = {
            {
                text = "set architecture aarch64",
                description = "Set architecture to ARM64",
                ignoreFailures = false
            },
            {
                text = "target remote localhost:1234",
                description = "Connect to QEMU GDB server",
                ignoreFailures = false
            },
            {
                text = "source {{ gdb_config.init_file }}",
                description = "Load custom GDB configuration",
                ignoreFailures = true
            }
        },
        preLaunchTask = "start-qemu-arm64"
    }
{% endif %}
}

-- Support for other assembly file types
dap.configurations.s = dap.configurations.asm
dap.configurations.S = dap.configurations.asm

-- Key mappings for DAP debugging
local function setup_dap_keymaps()
    local opts = { noremap = true, silent = true }
    
    -- Core debugging controls
    vim.keymap.set('n', '<Leader>db', dap.toggle_breakpoint, 
        vim.tbl_extend('force', opts, { desc = 'Toggle breakpoint' }))
    vim.keymap.set('n', '<Leader>dB', function()
        dap.set_breakpoint(vim.fn.input('Breakpoint condition: '))
    end, vim.tbl_extend('force', opts, { desc = 'Set conditional breakpoint' }))
    
    vim.keymap.set('n', '<Leader>dc', dap.continue, 
        vim.tbl_extend('force', opts, { desc = 'Continue debugging' }))
    vim.keymap.set('n', '<Leader>ds', dap.step_over, 
        vim.tbl_extend('force', opts, { desc = 'Step over' }))
    vim.keymap.set('n', '<Leader>di', dap.step_into, 
        vim.tbl_extend('force', opts, { desc = 'Step into' }))
    vim.keymap.set('n', '<Leader>do', dap.step_out, 
        vim.tbl_extend('force', opts, { desc = 'Step out' }))
    
    -- Session management
    vim.keymap.set('n', '<Leader>dr', dap.repl.open, 
        vim.tbl_extend('force', opts, { desc = 'Open REPL' }))
    vim.keymap.set('n', '<Leader>dl', dap.run_last, 
        vim.tbl_extend('force', opts, { desc = 'Run last configuration' }))
    vim.keymap.set('n', '<Leader>dt', dap.terminate, 
        vim.tbl_extend('force', opts, { desc = 'Terminate session' }))
    
    -- Assembly-specific debugging
    vim.keymap.set('n', '<Leader>dar', function()
        dap.repl.execute('show_general_regs')
    end, vim.tbl_extend('force', opts, { desc = 'Show ARM64 registers' }))
    
    vim.keymap.set('n', '<Leader>das', function()
        dap.repl.execute('stack_dump')
    end, vim.tbl_extend('force', opts, { desc = 'Show stack dump' }))
    
    vim.keymap.set('n', '<Leader>dai', function()
        dap.repl.execute('next_instruction')
    end, vim.tbl_extend('force', opts, { desc = 'Show next instruction' }))
    
    vim.keymap.set('n', '<Leader>dac', function()
        dap.repl.execute('calling_convention_check')
    end, vim.tbl_extend('force', opts, { desc = 'Check calling convention' }))
end

-- Setup function to be called from asm_utils.lua
local function setup_gdb_dap()
    setup_dap_keymaps()
    
    -- Configure DAP UI if available
    local dapui_ok, dapui = pcall(require, 'dapui')
    if dapui_ok then
        dapui.setup({
            layouts = {
                {
                    elements = {
                        { id = "scopes", size = 0.25 },
                        { id = "breakpoints", size = 0.25 },
                        { id = "stacks", size = 0.25 },
                        { id = "watches", size = 0.25 },
                    },
                    size = 40,
                    position = "left",
                },
                {
                    elements = {
                        { id = "repl", size = 0.5 },
                        { id = "console", size = 0.5 },
                    },
                    size = 10,
                    position = "bottom",
                }
            }
        })
        
        -- Auto-open/close DAP UI
        dap.listeners.after.event_initialized["dapui_config"] = function()
            dapui.open()
        end
        dap.listeners.before.event_terminated["dapui_config"] = function()
            dapui.close()
        end
        dap.listeners.before.event_exited["dapui_config"] = function()
            dapui.close()
        end
    end
    
    vim.notify("GDB DAP configuration loaded for assembly debugging", vim.log.levels.INFO)
end

-- Auto-setup if this file is sourced
setup_gdb_dap()

-- Export setup function for manual calling
return {
    setup = setup_gdb_dap,
    dap = dap
}