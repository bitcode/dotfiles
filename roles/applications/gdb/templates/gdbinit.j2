# ═══════════════════════════════════════════════════════════════
# ARM64/AArch64 Assembly Debugging Configuration
# Generated by Dotsible - {{ ansible_date_time.iso8601 }}
# Platform: {{ ansible_os_family }} {{ ansible_architecture }}
# Profile: {{ profile | default('minimal') }}
# ═══════════════════════════════════════════════════════════════

# Core Settings
set confirm off
set verbose off
set history save on
set history size {{ gdb_config.history_size }}
set history filename {{ gdb_config.history_file }}
set print pretty on
set print array on
set print array-indexes on
set print symbol-filename on
set print object on
set print static-members on
set print vtbl on
set print demangle on
set demangle-style gnu-v3
set print address on
set print symbol on

# ARM64-Specific Settings
{% if ansible_architecture in ['arm64', 'aarch64'] %}
set architecture aarch64
{% elif ansible_architecture in ['armv7l', 'armv6l'] %}
set architecture arm
{% elif ansible_architecture in ['x86_64', 'amd64'] %}
set architecture i386:x86-64
{% endif %}
set endian auto

# TUI Configuration
set tui border-kind {{ gdb_tui.border_kind }}
set tui active-border-mode {{ gdb_tui.active_border_mode }}
set tui border-mode {{ gdb_tui.border_mode }}

# Assembly-specific settings
set disassembly-flavor intel
set print asm-demangle on

{% if gdb_current_features.advanced_tui | default(false) %}
# ═══════════════════════════════════════════════════════════════
# ADVANCED TUI LAYOUTS FOR ARM64 DEBUGGING
# ═══════════════════════════════════════════════════════════════

# Custom Display Layouts for ARM64
define arm64_layout
    layout split
    focus cmd
    winheight src 15
    winheight cmd 10
    printf "ARM64 split layout activated\n"
end
document arm64_layout
ARM64 optimized split layout with source and command windows
Usage: arm64_layout
end

define arm64_registers
    layout regs
    focus cmd
    tui reg general
    printf "ARM64 register layout activated\n"
end
document arm64_registers
ARM64 register display layout
Usage: arm64_registers
end

define arm64_full
    layout split
    layout regs
    focus cmd
    winheight src 12
    winheight regs 8
    winheight cmd 8
    printf "ARM64 full layout activated\n"
end
document arm64_full
ARM64 full layout with source, registers, and command windows
Usage: arm64_full
end

# ═══════════════════════════════════════════════════════════════
# ARM64 REGISTER DISPLAY HELPERS
# ═══════════════════════════════════════════════════════════════

define show_general_regs
    printf "═══ ARM64 General Registers ═══\n"
    printf "X0:  %016lx  X1:  %016lx  X2:  %016lx  X3:  %016lx\n", $x0, $x1, $x2, $x3
    printf "X4:  %016lx  X5:  %016lx  X6:  %016lx  X7:  %016lx\n", $x4, $x5, $x6, $x7
    printf "X8:  %016lx  X9:  %016lx  X10: %016lx  X11: %016lx\n", $x8, $x9, $x10, $x11
    printf "X12: %016lx  X13: %016lx  X14: %016lx  X15: %016lx\n", $x12, $x13, $x14, $x15
    printf "X16: %016lx  X17: %016lx  X18: %016lx  X19: %016lx\n", $x16, $x17, $x18, $x19
    printf "X20: %016lx  X21: %016lx  X22: %016lx  X23: %016lx\n", $x20, $x21, $x22, $x23
    printf "X24: %016lx  X25: %016lx  X26: %016lx  X27: %016lx\n", $x24, $x25, $x26, $x27
    printf "X28: %016lx  X29: %016lx  X30: %016lx  SP:  %016lx\n", $x28, $x29, $x30, $sp
    printf "PC:  %016lx  PSTATE: %08x\n", $pc, $cpsr
end
document show_general_regs
Display all ARM64 general-purpose registers in organized format
Usage: show_general_regs
Alias: sr
end

define show_vector_regs
    printf "═══ ARM64 Vector Registers ═══\n"
    printf "V0:  "
    x/4wx $v0.d
    printf "V1:  "
    x/4wx $v1.d
    printf "V2:  "
    x/4wx $v2.d
    printf "V3:  "
    x/4wx $v3.d
    printf "V4:  "
    x/4wx $v4.d
    printf "V5:  "
    x/4wx $v5.d
    printf "V6:  "
    x/4wx $v6.d
    printf "V7:  "
    x/4wx $v7.d
end
document show_vector_regs
Display ARM64 vector registers (V0-V7)
Usage: show_vector_regs
Alias: sv
end

define show_system_regs
    printf "═══ ARM64 System Registers ═══\n"
    printf "NZCV: %08x  FPCR: %08x  FPSR: %08x\n", $cpsr, $fpcr, $fpsr
    printf "TPIDR_EL0: %016lx\n", $tpidr_el0
    printf "Current EL: %d\n", ($cpsr >> 2) & 3
end
document show_system_regs
Display ARM64 system registers
Usage: show_system_regs
Alias: ss
end

# ═══════════════════════════════════════════════════════════════
# MEMORY VISUALIZATION
# ═══════════════════════════════════════════════════════════════

define hexdump
    if $argc == 0
        printf "Usage: hexdump <address> [count]\n"
    else
        if $argc == 1
            x/64bx $arg0
        else
            x/$arg1bx $arg0
        end
    end
end
document hexdump
Display memory in hexadecimal format
Usage: hexdump <address> [count]
Default count is 64 bytes
end

define stack_dump
    printf "═══ Stack Dump (ARM64) ═══\n"
    printf "Stack Pointer: %016lx\n", $sp
    x/32gx $sp
end
document stack_dump
Display ARM64 stack contents
Usage: stack_dump
Alias: sd
end

define memory_map
    printf "═══ Memory Mapping ═══\n"
    info proc mappings
end
document memory_map
Display process memory mappings
Usage: memory_map
Alias: mm
end

# ═══════════════════════════════════════════════════════════════
# ARM64 INSTRUCTION ANALYSIS
# ═══════════════════════════════════════════════════════════════

define next_instruction
    printf "Next instruction: "
    x/i $pc
    printf "Instruction bytes: "
    x/4bx $pc
    printf "Disassembly context:\n"
    x/5i $pc
end
document next_instruction
Display next instruction with context
Usage: next_instruction
Alias: ni
end

define calling_convention_check
    printf "═══ ARM64 Calling Convention Check ═══\n"
    printf "Arguments (X0-X7):\n"
    printf "  X0 (arg1): %016lx\n", $x0
    printf "  X1 (arg2): %016lx\n", $x1
    printf "  X2 (arg3): %016lx\n", $x2
    printf "  X3 (arg4): %016lx\n", $x3
    printf "  X4 (arg5): %016lx\n", $x4
    printf "  X5 (arg6): %016lx\n", $x5
    printf "  X6 (arg7): %016lx\n", $x6
    printf "  X7 (arg8): %016lx\n", $x7
    printf "Return address (X30): %016lx\n", $x30
    printf "Frame pointer (X29): %016lx\n", $x29
    printf "Stack pointer (SP):   %016lx\n", $sp
end
document calling_convention_check
Check ARM64 AAPCS calling convention compliance
Usage: calling_convention_check
Alias: cc
end

define branch_analysis
    printf "═══ Branch Analysis ═══\n"
    printf "Current PC: %016lx\n", $pc
    x/i $pc
    printf "Branch target prediction:\n"
    if ($cpsr & 0x40000000)
        printf "Zero flag set - conditional branch likely taken\n"
    else
        printf "Zero flag clear - conditional branch likely not taken\n"
    end
end
document branch_analysis
Analyze branch instructions and prediction
Usage: branch_analysis
Alias: ba
end

# ═══════════════════════════════════════════════════════════════
# BREAKPOINT MANAGEMENT
# ═══════════════════════════════════════════════════════════════

define bp_function
    if $argc == 0
        printf "Usage: bp_function <function_name>\n"
    else
        break $arg0
        printf "Breakpoint set at function: %s\n", $arg0
    end
end
document bp_function
Set breakpoint at function
Usage: bp_function <function_name>
end

define bp_address
    if $argc == 0
        printf "Usage: bp_address <address>\n"
    else
        break *$arg0
        printf "Breakpoint set at address: 0x%lx\n", $arg0
    end
end
document bp_address
Set breakpoint at specific address
Usage: bp_address <address>
end

define bp_list_detailed
    printf "═══ Detailed Breakpoint List ═══\n"
    info breakpoints
    printf "═══ Watchpoint List ═══\n"
    info watchpoints
end
document bp_list_detailed
List all breakpoints and watchpoints with details
Usage: bp_list_detailed
Alias: bpl
end

# ═══════════════════════════════════════════════════════════════
# STEP-THROUGH DEBUGGING ENHANCEMENTS
# ═══════════════════════════════════════════════════════════════

define step_with_context
    step
    printf "═══ Current Context ═══\n"
    next_instruction
    printf "Key Registers: X0=%016lx X1=%016lx X2=%016lx\n", $x0, $x1, $x2
    printf "Stack: SP=%016lx FP=%016lx LR=%016lx\n", $sp, $x29, $x30
end
document step_with_context
Step with full context display
Usage: step_with_context
Alias: sc
end

define continue_with_trace
    printf "Continuing execution with trace...\n"
    continue
end
document continue_with_trace
Continue execution with tracing enabled
Usage: continue_with_trace
Alias: ct
end

define finish_with_result
    finish
    printf "═══ Function Return Analysis ═══\n"
    printf "Return value (X0): %016lx\n", $x0
    printf "Return address: %016lx\n", $x30
    next_instruction
end
document finish_with_result
Finish function execution and show return analysis
Usage: finish_with_result
Alias: fr
end

{% endif %}

# ═══════════════════════════════════════════════════════════════
# ALIASES FOR COMMON OPERATIONS
# ═══════════════════════════════════════════════════════════════

{% if gdb_current_features.advanced_tui | default(false) %}
alias sr = show_general_regs
alias sv = show_vector_regs
alias ss = show_system_regs
alias ni = next_instruction
alias cc = calling_convention_check
alias ba = branch_analysis
alias sd = stack_dump
alias mm = memory_map
alias al = arm64_layout
alias ar = arm64_registers
alias af = arm64_full
alias bpl = bp_list_detailed
alias sc = step_with_context
alias ct = continue_with_trace
alias fr = finish_with_result
{% endif %}

# Basic aliases for all profiles
alias q = quit
alias r = run
alias c = continue
alias s = step
alias n = next
alias bt = backtrace
alias p = print
alias x = examine

# ═══════════════════════════════════════════════════════════════
# AUTO-COMMANDS AND HOOKS
# ═══════════════════════════════════════════════════════════════

{% if gdb_current_features.advanced_tui | default(false) %}
define hook-stop
    printf "\n═══ Execution Stopped ═══\n"
    next_instruction
    printf "Current function: "
    info function $pc
    printf "Registers: X0=%016lx X1=%016lx X2=%016lx\n", $x0, $x1, $x2
end
{% endif %}

# ═══════════════════════════════════════════════════════════════
# INITIALIZATION
# ═══════════════════════════════════════════════════════════════

printf "ARM64/AArch64 Assembly Debugging Environment Loaded\n"
printf "Profile: {{ profile | default('minimal') }}\n"
printf "Platform: {{ ansible_os_family }} {{ ansible_architecture }}\n"
{% if gdb_current_features.advanced_tui | default(false) %}
printf "Available commands: sr, sv, ss, ni, cc, ba, sd, mm\n"
printf "Layouts: al (arm64_layout), ar (arm64_registers), af (arm64_full)\n"
printf "Debugging: sc (step_with_context), ct (continue_with_trace), fr (finish_with_result)\n"
printf "Use 'help user-defined' for custom command help\n"
{% endif %}
printf "Configuration loaded from: {{ gdb_config.init_file }}\n"

{% if gdb_current_features.advanced_tui | default(false) %}
# Set initial layout
arm64_layout
{% endif %}

# ═══════════════════════════════════════════════════════════════
# END OF CONFIGURATION
# ═══════════════════════════════════════════════════════════════