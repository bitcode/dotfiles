#!/bin/bash
# QEMU {{ arch }} System Emulator Launch Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

# Configuration
ARCH="{{ arch }}"
EMULATOR="{{ qemu_config.system_emulators[arch] }}"
MEMORY="{{ qemu_config.default_memory[arch] }}"
{% if ansible_os_family == "Darwin" %}
MACHINE="{{ qemu_macos_options.machine_types[arch] | default('virt') }}"
ACCEL_OPTS="{{ qemu_macos_options.hvf_acceleration | join(' ') }}"
{% else %}
MACHINE="{{ (qemu_debian_options.machine_types | default(qemu_archlinux_options.machine_types))[arch] | default('virt') }}"
ACCEL_OPTS="{{ qemu_debian_options.kvm_acceleration | default(qemu_archlinux_options.kvm_acceleration) | join(' ') }}"
{% endif %}

# Default options
COMMON_OPTS="{{ qemu_config.common_options | join(' ') }}"

# CPU configuration
{% if arch == 'arm64' %}
CPU="cortex-a57"
{% elif arch == 'arm32' %}
CPU="cortex-a15"
{% elif arch == 'x86_64' %}
CPU="qemu64"
{% elif arch in ['riscv64', 'riscv32'] %}
CPU="rv64"
{% endif %}

# Usage function
usage() {
    cat << EOF
Usage: $0 [OPTIONS] [KERNEL] [INITRD]

QEMU {{ arch }} System Emulator

OPTIONS:
    -h, --help          Show this help message
    -m, --memory SIZE   Memory size (default: ${MEMORY})
    -k, --kernel FILE   Kernel image to boot
    -i, --initrd FILE   Initial ramdisk
    -d, --debug         Enable GDB debugging
    -n, --no-accel      Disable hardware acceleration
    -c, --cmdline STR   Kernel command line
    -v, --verbose       Verbose output
    --dry-run           Show command without executing

EXAMPLES:
    $0 --kernel vmlinuz --initrd initrd.img
    $0 --debug --kernel kernel.elf
    $0 --memory 1G --kernel boot.bin

EOF
}

# Parse command line arguments
KERNEL=""
INITRD=""
DEBUG=false
NO_ACCEL=false
CMDLINE="console=ttyAMA0 earlycon=pl011,0x9000000"
VERBOSE=false
DRY_RUN=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        -m|--memory)
            MEMORY="$2"
            shift 2
            ;;
        -k|--kernel)
            KERNEL="$2"
            shift 2
            ;;
        -i|--initrd)
            INITRD="$2"
            shift 2
            ;;
        -d|--debug)
            DEBUG=true
            shift
            ;;
        -n|--no-accel)
            NO_ACCEL=true
            shift
            ;;
        -c|--cmdline)
            CMDLINE="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        -*)
            echo "Unknown option: $1" >&2
            usage
            exit 1
            ;;
        *)
            if [[ -z "$KERNEL" ]]; then
                KERNEL="$1"
            elif [[ -z "$INITRD" ]]; then
                INITRD="$1"
            else
                echo "Too many positional arguments" >&2
                usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Build QEMU command
QEMU_CMD="${EMULATOR}"
QEMU_CMD+=" -M ${MACHINE}"
QEMU_CMD+=" -cpu ${CPU}"
QEMU_CMD+=" -m ${MEMORY}"

# Add acceleration if not disabled
if [[ "$NO_ACCEL" != true ]]; then
    QEMU_CMD+=" ${ACCEL_OPTS}"
fi

# Add common options
QEMU_CMD+=" ${COMMON_OPTS}"

# Add kernel if specified
if [[ -n "$KERNEL" ]]; then
    if [[ ! -f "$KERNEL" ]]; then
        echo "Error: Kernel file '$KERNEL' not found" >&2
        exit 1
    fi
    QEMU_CMD+=" -kernel ${KERNEL}"
fi

# Add initrd if specified
if [[ -n "$INITRD" ]]; then
    if [[ ! -f "$INITRD" ]]; then
        echo "Error: Initrd file '$INITRD' not found" >&2
        exit 1
    fi
    QEMU_CMD+=" -initrd ${INITRD}"
fi

# Add kernel command line
if [[ -n "$CMDLINE" ]]; then
    QEMU_CMD+=" -append '${CMDLINE}'"
fi

# Add debugging options if enabled
if [[ "$DEBUG" == true ]]; then
    QEMU_CMD+=" {{ qemu_config.gdb_options | join(' ') }}"
    echo "GDB debugging enabled. Connect with: gdb -ex 'target remote localhost:1234'"
fi

# Execute or show command
if [[ "$VERBOSE" == true ]] || [[ "$DRY_RUN" == true ]]; then
    echo "QEMU Command:"
    echo "$QEMU_CMD"
    echo ""
fi

if [[ "$DRY_RUN" != true ]]; then
    if [[ "$VERBOSE" == true ]]; then
        echo "Starting QEMU {{ arch }} emulator..."
    fi
    exec $QEMU_CMD
fi