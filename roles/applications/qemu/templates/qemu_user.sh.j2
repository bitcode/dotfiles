#!/bin/bash
# QEMU {{ arch }} User Emulation Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

# Configuration
ARCH="{{ arch }}"
USER_EMULATOR="{{ qemu_config.user_emulators[arch] }}"

# Usage function
usage() {
    cat << EOF
Usage: $0 [OPTIONS] BINARY [ARGS...]

QEMU {{ arch }} User Mode Emulation

This script runs a {{ arch }} binary using QEMU user mode emulation.

OPTIONS:
    -h, --help          Show this help message
    -d, --debug         Enable GDB debugging
    -p, --port PORT     GDB port (default: 1234)
    -v, --verbose       Verbose output
    -e, --env VAR=VAL   Set environment variable
    -L, --library-path  Set library path
    --dry-run           Show command without executing

EXAMPLES:
    $0 ./hello_world
    $0 --debug ./program
    $0 --env LD_LIBRARY_PATH=/lib ./binary
    $0 --library-path /usr/{{ arch }}-linux-gnu ./program

EOF
}

# Parse command line arguments
BINARY=""
DEBUG=false
GDB_PORT=1234
VERBOSE=false
DRY_RUN=false
ENV_VARS=()
LIBRARY_PATH=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        -d|--debug)
            DEBUG=true
            shift
            ;;
        -p|--port)
            GDB_PORT="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -e|--env)
            ENV_VARS+=("$2")
            shift 2
            ;;
        -L|--library-path)
            LIBRARY_PATH="$2"
            shift 2
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        -*)
            echo "Unknown option: $1" >&2
            usage
            exit 1
            ;;
        *)
            BINARY="$1"
            shift
            break
            ;;
    esac
done

# Validate binary
if [[ -z "$BINARY" ]]; then
    echo "Error: No binary specified" >&2
    usage
    exit 1
fi

if [[ ! -f "$BINARY" ]]; then
    echo "Error: Binary file '$BINARY' not found" >&2
    exit 1
fi

# Build QEMU command
QEMU_CMD="${USER_EMULATOR}"

# Add debugging options if enabled
if [[ "$DEBUG" == true ]]; then
    QEMU_CMD+=" -g ${GDB_PORT}"
    echo "GDB debugging enabled. Connect with: gdb ${BINARY} -ex 'target remote localhost:${GDB_PORT}'"
fi

# Add library path if specified
if [[ -n "$LIBRARY_PATH" ]]; then
    QEMU_CMD+=" -L ${LIBRARY_PATH}"
fi

# Add environment variables
for env_var in "${ENV_VARS[@]}"; do
    QEMU_CMD+=" -E ${env_var}"
done

# Add binary and remaining arguments
QEMU_CMD+=" ${BINARY}"
if [[ $# -gt 0 ]]; then
    QEMU_CMD+=" $@"
fi

# Execute or show command
if [[ "$VERBOSE" == true ]] || [[ "$DRY_RUN" == true ]]; then
    echo "QEMU User Mode Command:"
    echo "$QEMU_CMD"
    echo ""
fi

if [[ "$DRY_RUN" != true ]]; then
    if [[ "$VERBOSE" == true ]]; then
        echo "Starting QEMU {{ arch }} user mode emulation..."
    fi
    exec $QEMU_CMD
fi