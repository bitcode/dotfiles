#!/bin/bash
# QEMU {{ arch }} Debugging Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

# Configuration
ARCH="{{ arch }}"
EMULATOR="{{ qemu_config.system_emulators[arch] }}"
MEMORY="{{ qemu_config.default_memory[arch] }}"
GDB_PORT="{{ 1234 + loop.index0 | default(1234) }}"
MONITOR_PORT="{{ 4444 + loop.index0 | default(4444) }}"

{% if ansible_os_family == "Darwin" %}
MACHINE="{{ qemu_macos_options.machine_types[arch] | default('virt') }}"
ACCEL_OPTS="{{ qemu_macos_options.hvf_acceleration | join(' ') }}"
{% else %}
MACHINE="{{ (qemu_debian_options.machine_types | default(qemu_archlinux_options.machine_types))[arch] | default('virt') }}"
ACCEL_OPTS="{{ qemu_debian_options.kvm_acceleration | default(qemu_archlinux_options.kvm_acceleration) | join(' ') }}"
{% endif %}

# CPU configuration
{% if arch == 'arm64' %}
CPU="cortex-a57"
GDB_ARCH="aarch64"
{% elif arch == 'arm32' %}
CPU="cortex-a15"
GDB_ARCH="arm"
{% elif arch == 'x86_64' %}
CPU="qemu64"
GDB_ARCH="i386:x86-64"
{% elif arch in ['riscv64', 'riscv32'] %}
CPU="rv64"
GDB_ARCH="riscv:rv64"
{% endif %}

# Usage function
usage() {
    cat << EOF
Usage: $0 [OPTIONS] [BINARY]

QEMU {{ arch }} Debugging Environment

This script starts QEMU with GDB debugging enabled and optionally
launches GDB with the specified binary.

OPTIONS:
    -h, --help          Show this help message
    -b, --binary FILE   Binary to debug
    -g, --gdb           Auto-launch GDB
    -p, --port PORT     GDB port (default: ${GDB_PORT})
    -m, --memory SIZE   Memory size (default: ${MEMORY})
    -w, --wait          Wait for GDB connection before starting
    -n, --no-accel      Disable hardware acceleration
    -v, --verbose       Verbose output
    --gdb-script FILE   GDB script to execute
    --dry-run           Show commands without executing

EXAMPLES:
    $0 --binary program.elf --gdb
    $0 --wait --binary kernel.bin
    $0 --port 1235 --binary test.elf

DEBUGGING WORKFLOW:
    1. Start QEMU with debugging: $0 --binary program.elf --wait
    2. In another terminal, connect GDB:
       gdb program.elf -ex 'target remote localhost:${GDB_PORT}'
    3. Set breakpoints and continue execution

EOF
}

# Parse command line arguments
BINARY=""
AUTO_GDB=false
WAIT_GDB=false
NO_ACCEL=false
VERBOSE=false
DRY_RUN=false
GDB_SCRIPT=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        -b|--binary)
            BINARY="$2"
            shift 2
            ;;
        -g|--gdb)
            AUTO_GDB=true
            shift
            ;;
        -p|--port)
            GDB_PORT="$2"
            shift 2
            ;;
        -m|--memory)
            MEMORY="$2"
            shift 2
            ;;
        -w|--wait)
            WAIT_GDB=true
            shift
            ;;
        -n|--no-accel)
            NO_ACCEL=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        --gdb-script)
            GDB_SCRIPT="$2"
            shift 2
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        -*)
            echo "Unknown option: $1" >&2
            usage
            exit 1
            ;;
        *)
            if [[ -z "$BINARY" ]]; then
                BINARY="$1"
            else
                echo "Too many positional arguments" >&2
                usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate binary if specified
if [[ -n "$BINARY" ]] && [[ ! -f "$BINARY" ]]; then
    echo "Error: Binary file '$BINARY' not found" >&2
    exit 1
fi

# Build QEMU command
QEMU_CMD="${EMULATOR}"
QEMU_CMD+=" -M ${MACHINE}"
QEMU_CMD+=" -cpu ${CPU}"
QEMU_CMD+=" -m ${MEMORY}"

# Add acceleration if not disabled
if [[ "$NO_ACCEL" != true ]]; then
    QEMU_CMD+=" ${ACCEL_OPTS}"
fi

# Add debugging options
QEMU_CMD+=" -gdb tcp::${GDB_PORT}"
QEMU_CMD+=" -monitor tcp:localhost:${MONITOR_PORT},server,nowait"

# Wait for GDB connection if requested
if [[ "$WAIT_GDB" == true ]]; then
    QEMU_CMD+=" -S"
fi

# Add binary if specified
if [[ -n "$BINARY" ]]; then
    QEMU_CMD+=" -kernel ${BINARY}"
fi

# Add common options
QEMU_CMD+=" {{ qemu_config.common_options | join(' ') }}"

# Build GDB command if auto-launch is enabled
if [[ "$AUTO_GDB" == true ]] && [[ -n "$BINARY" ]]; then
    GDB_CMD="gdb ${BINARY}"
    GDB_CMD+=" -ex 'set architecture ${GDB_ARCH}'"
    GDB_CMD+=" -ex 'target remote localhost:${GDB_PORT}'"
    GDB_CMD+=" -ex 'set confirm off'"
    GDB_CMD+=" -ex 'set pagination off'"
    
    if [[ -n "$GDB_SCRIPT" ]] && [[ -f "$GDB_SCRIPT" ]]; then
        GDB_CMD+=" -x ${GDB_SCRIPT}"
    fi
fi

# Display information
if [[ "$VERBOSE" == true ]] || [[ "$DRY_RUN" == true ]]; then
    echo "QEMU {{ arch }} Debugging Session"
    echo "================================"
    echo "Architecture: {{ arch }}"
    echo "GDB Port: ${GDB_PORT}"
    echo "Monitor Port: ${MONITOR_PORT}"
    echo "Binary: ${BINARY:-'None'}"
    echo "Wait for GDB: ${WAIT_GDB}"
    echo "Auto-launch GDB: ${AUTO_GDB}"
    echo ""
    echo "QEMU Command:"
    echo "$QEMU_CMD"
    
    if [[ "$AUTO_GDB" == true ]] && [[ -n "$BINARY" ]]; then
        echo ""
        echo "GDB Command:"
        echo "$GDB_CMD"
    fi
    echo ""
fi

# Execute commands
if [[ "$DRY_RUN" != true ]]; then
    echo "Starting QEMU {{ arch }} debugging session..."
    echo "GDB Port: ${GDB_PORT}"
    echo "Monitor Port: ${MONITOR_PORT}"
    
    if [[ "$AUTO_GDB" == true ]] && [[ -n "$BINARY" ]]; then
        echo "Auto-launching GDB in 3 seconds..."
        sleep 3
        
        # Start QEMU in background
        $QEMU_CMD &
        QEMU_PID=$!
        
        # Wait a moment for QEMU to start
        sleep 2
        
        # Launch GDB
        $GDB_CMD
        
        # Kill QEMU when GDB exits
        kill $QEMU_PID 2>/dev/null || true
    else
        echo "Connect GDB with: gdb -ex 'target remote localhost:${GDB_PORT}'"
        exec $QEMU_CMD
    fi
fi