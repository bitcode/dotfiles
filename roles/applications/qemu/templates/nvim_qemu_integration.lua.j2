-- QEMU Integration for Neovim
-- Generated by Ansible on {{ ansible_date_time.iso8601 }}

local M = {}

-- Configuration
M.config = {
    qemu_path = "{{ qemu_path | default('/usr/bin') }}",
    scripts_dir = "{{ qemu_paths.scripts_dir }}",
    examples_dir = "{{ qemu_paths.examples_dir }}",
    config_dir = "{{ qemu_paths.config_dir }}",
    
    -- Available architectures
    architectures = {
{% for arch in qemu_config.architectures %}
        "{{ arch }}",
{% endfor %}
    },
    
    -- System emulators
    system_emulators = {
{% for arch, emulator in qemu_config.system_emulators.items() %}
        {{ arch }} = "{{ emulator }}",
{% endfor %}
    },
    
    -- User emulators
    user_emulators = {
{% for arch, emulator in qemu_config.user_emulators.items() %}
        {{ arch }} = "{{ emulator }}",
{% endfor %}
    },
    
    -- Default memory sizes
    default_memory = {
{% for arch in qemu_config.architectures %}
        {{ arch }} = "{{ qemu_config.default_memory[arch] }}",
{% endfor %}
    }
}

-- Check if QEMU is available
function M.is_qemu_available()
    local handle = io.popen("command -v qemu-system-aarch64")
    local result = handle:read("*a")
    handle:close()
    return result ~= ""
end

-- Get QEMU status
function M.get_qemu_status()
    local status = {
        available = M.is_qemu_available(),
        system_emulators = {},
        user_emulators = {},
        scripts = {}
    }
    
    -- Check system emulators
    for arch, emulator in pairs(M.config.system_emulators) do
        local handle = io.popen("command -v " .. emulator)
        local result = handle:read("*a")
        handle:close()
        status.system_emulators[arch] = result ~= ""
    end
    
    -- Check user emulators
    for arch, emulator in pairs(M.config.user_emulators) do
        local handle = io.popen("command -v " .. emulator)
        local result = handle:read("*a")
        handle:close()
        status.user_emulators[arch] = result ~= ""
    end
    
    -- Check scripts
    for _, arch in ipairs(M.config.architectures) do
        local script_path = M.config.scripts_dir .. "/qemu-" .. arch
        local file = io.open(script_path, "r")
        if file then
            status.scripts[arch] = true
            file:close()
        else
            status.scripts[arch] = false
        end
    end
    
    return status
end

-- Launch QEMU emulator
function M.launch_qemu(arch, options)
    if not arch then
        print("Error: Architecture not specified")
        return false
    end
    
    if not vim.tbl_contains(M.config.architectures, arch) then
        print("Error: Unsupported architecture: " .. arch)
        return false
    end
    
    local script_path = M.config.scripts_dir .. "/qemu-" .. arch
    local cmd = script_path
    
    if options then
        if options.kernel then
            cmd = cmd .. " --kernel " .. options.kernel
        end
        if options.memory then
            cmd = cmd .. " --memory " .. options.memory
        end
        if options.debug then
            cmd = cmd .. " --debug"
        end
        if options.verbose then
            cmd = cmd .. " --verbose"
        end
    end
    
    -- Launch in terminal
    vim.cmd("terminal " .. cmd)
    return true
end

-- Launch QEMU debug session
function M.debug_qemu(arch, binary, options)
    if not arch then
        print("Error: Architecture not specified")
        return false
    end
    
    if not vim.tbl_contains(M.config.architectures, arch) then
        print("Error: Unsupported architecture: " .. arch)
        return false
    end
    
    local script_path = M.config.scripts_dir .. "/qemu-debug-" .. arch
    local cmd = script_path
    
    if binary then
        cmd = cmd .. " --binary " .. binary
    end
    
    if options then
        if options.gdb then
            cmd = cmd .. " --gdb"
        end
        if options.wait then
            cmd = cmd .. " --wait"
        end
        if options.port then
            cmd = cmd .. " --port " .. options.port
        end
        if options.verbose then
            cmd = cmd .. " --verbose"
        end
    end
    
    -- Launch in terminal
    vim.cmd("terminal " .. cmd)
    return true
end

-- Run user mode emulation
function M.run_user_qemu(arch, binary, args)
    if not arch then
        print("Error: Architecture not specified")
        return false
    end
    
    if not binary then
        print("Error: Binary not specified")
        return false
    end
    
    if not vim.tbl_contains(M.config.architectures, arch) then
        print("Error: Unsupported architecture: " .. arch)
        return false
    end
    
    local script_path = M.config.scripts_dir .. "/qemu-user-" .. arch
    local cmd = script_path .. " " .. binary
    
    if args then
        cmd = cmd .. " " .. table.concat(args, " ")
    end
    
    -- Launch in terminal
    vim.cmd("terminal " .. cmd)
    return true
end

-- Get current file architecture
function M.detect_architecture()
    local filename = vim.fn.expand("%:t")
    local filetype = vim.bo.filetype
    
    -- Try to detect from filename
    for _, arch in ipairs(M.config.architectures) do
        if string.find(filename, arch) then
            return arch
        end
    end
    
    -- Try to detect from file content for assembly files
    if filetype == "asm" or filetype == "nasm" or filetype == "gas" then
        local lines = vim.api.nvim_buf_get_lines(0, 0, 50, false)
        for _, line in ipairs(lines) do
            if string.find(line, "aarch64") or string.find(line, "arm64") then
                return "arm64"
            elseif string.find(line, "arm") then
                return "arm32"
            elseif string.find(line, "x86_64") or string.find(line, "x64") then
                return "x86_64"
            elseif string.find(line, "riscv64") then
                return "riscv64"
            elseif string.find(line, "riscv") then
                return "riscv32"
            end
        end
    end
    
    -- Default to arm64 if can't detect
    return "arm64"
end

-- Open examples directory
function M.open_examples(arch)
    local examples_path = M.config.examples_dir
    if arch then
        examples_path = examples_path .. "/" .. arch
    end
    
    vim.cmd("edit " .. examples_path)
end

-- Show QEMU status
function M.show_status()
    local status = M.get_qemu_status()
    
    print("QEMU Status:")
    print("============")
    print("Available: " .. (status.available and "Yes" or "No"))
    print("")
    
    print("System Emulators:")
    for arch, available in pairs(status.system_emulators) do
        print("  " .. arch .. ": " .. (available and "✓" or "✗"))
    end
    print("")
    
    print("User Emulators:")
    for arch, available in pairs(status.user_emulators) do
        print("  " .. arch .. ": " .. (available and "✓" or "✗"))
    end
    print("")
    
    print("Scripts:")
    for arch, available in pairs(status.scripts) do
        print("  " .. arch .. ": " .. (available and "✓" or "✗"))
    end
end

return M