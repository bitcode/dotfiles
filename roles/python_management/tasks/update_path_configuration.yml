---
# PATH Configuration Update Tasks
# Updates shell configurations to prioritize new Python version

- name: Backup current shell configurations
  copy:
    src: "{{ item }}"
    dest: "{{ item }}.backup.{{ ansible_date_time.epoch }}"
    remote_src: yes
  loop: "{{ shell_configs }}"
  when: 
    - python_version_management.create_rollback_point | default(true)
    - ansible_stat.stat.exists
  vars:
    ansible_stat: "{{ ansible_stat_result }}"
  register: shell_backup

- name: Check if shell config files exist
  stat:
    path: "{{ item }}"
  loop: "{{ shell_configs }}"
  register: shell_config_stats

- name: Remove old Python PATH entries from shell configs
  lineinfile:
    path: "{{ item.item }}"
    regexp: "{{ old_path_pattern }}"
    state: absent
  loop: "{{ shell_config_stats.results }}"
  vars:
    old_path_patterns:
      - 'export PATH.*python3\.[0-9].*'
      - 'export PATH.*\.local/lib/python3\.[0-9].*'
      - 'export PATH.*homebrew.*python@3\.[0-9].*'
      - 'export PATH.*usr/local/opt/python@3\.[0-9].*'
    old_path_pattern: "{{ old_path_patterns | join('|') }}"
  when: 
    - item.stat.exists
    - python_version_management.update_path_priority | default(true)

- name: Add new Python PATH entries to shell configs
  blockinfile:
    path: "{{ item.item }}"
    marker: "# {mark} DOTSIBLE PYTHON {{ python_version_management.target_version }} PATH"
    block: |
      # Python {{ python_version_management.target_version }} PATH configuration
      {% if ansible_os_family == 'Darwin' %}
      # Homebrew Python 3.13 (prioritized)
      export PATH="/opt/homebrew/opt/python@3.13/bin:$PATH"
      export PATH="/usr/local/opt/python@3.13/bin:$PATH"  # Intel Mac fallback
      {% endif %}
      
      # User-local Python binaries (pip, pipx installed packages)
      export PATH="$HOME/.local/bin:$PATH"
      
      {% if ansible_os_family == 'Darwin' %}
      # Python framework paths (macOS)
      export PATH="/opt/homebrew/opt/python@3.13/libexec/bin:$PATH"
      {% endif %}
      
      # Python aliases for consistency
      alias python3="{{ final_python_cmd | default('python3.13') }}"
      alias pip3="{{ final_python_cmd | default('python3.13') }} -m pip"
    create: yes
    mode: '0644'
  loop: "{{ shell_config_stats.results }}"
  when: 
    - item.stat.exists or item.item.endswith('.zshrc') or item.item.endswith('.bashrc')
    - python_version_management.update_path_priority | default(true)

- name: Update system alternatives (Debian/Ubuntu)
  alternatives:
    name: "{{ item.name }}"
    path: "{{ item.path }}"
    link: "{{ item.link }}"
    priority: "{{ item.priority }}"
  loop:
    - name: python3
      path: /usr/bin/python3.13
      link: /usr/bin/python3
      priority: 100
    - name: pip3
      path: "{{ ansible_user_dir }}/.local/bin/pip3.13"
      link: /usr/local/bin/pip3
      priority: 100
  become: yes
  when: 
    - ansible_os_family == 'Debian'
    - python_version_management.update_path_priority | default(true)
  failed_when: false

- name: Create Python environment verification script
  copy:
    content: |
      #!/bin/bash
      # Python Environment Verification Script
      # Generated by dotsible Python management
      
      echo "=== Python Environment Status ==="
      echo "Date: $(date)"
      echo ""
      
      echo "=== Python Version ==="
      python3 --version 2>&1
      echo ""
      
      echo "=== Python Location ==="
      which python3
      echo ""
      
      echo "=== pip Version ==="
      pip3 --version 2>&1
      echo ""
      
      echo "=== pip Location ==="
      which pip3
      echo ""
      
      echo "=== pipx Status ==="
      if command -v pipx >/dev/null 2>&1; then
        pipx --version
        echo "pipx location: $(which pipx)"
      else
        echo "pipx not available"
      fi
      echo ""
      
      echo "=== PATH Analysis ==="
      echo "Current PATH:"
      echo "$PATH" | tr ':' '\n' | grep -E "(python|bin)" | sort -u
      echo ""
      
      echo "=== Python Module Test ==="
      python3 -c "import sys, ssl, urllib.request; print('‚úÖ Core modules working')" 2>&1
      echo ""
      
      echo "=== pip Functionality Test ==="
      pip3 list --user | head -5
      echo ""
      
      echo "=== Environment Variables ==="
      env | grep -i python | sort
      
    dest: "{{ ansible_user_dir }}/.dotsible/python_migration/verify_environment.sh"
    mode: '0755'

- name: Update Windows PATH (Windows only)
  win_environment:
    name: PATH
    value: "{{ new_windows_path }}"
    level: user
    state: present
  vars:
    new_windows_path: >-
      {{ ansible_env.USERPROFILE }}\AppData\Roaming\Python\Python313\Scripts;
      C:\Python313;
      C:\Python313\Scripts;
      {{ ansible_env.PATH }}
  when: 
    - ansible_os_family == 'Windows'
    - python_version_management.update_path_priority | default(true)

- name: Source updated shell configurations
  shell: |
    {% for config_file in shell_configs %}
    if [[ -f "{{ config_file }}" ]]; then
      source "{{ config_file }}" 2>/dev/null || true
    fi
    {% endfor %}
  args:
    executable: "{{ ansible_user_shell | default('/bin/bash') }}"
  failed_when: false
  changed_when: false

- name: Verify PATH configuration update
  shell: |
    # Source the updated configuration
    {% for config_file in shell_configs %}
    [[ -f "{{ config_file }}" ]] && source "{{ config_file }}" 2>/dev/null
    {% endfor %}
    
    echo "=== PATH Verification ==="
    echo "Python3 location: $(which python3)"
    echo "Python3 version: $(python3 --version 2>&1)"
    echo "pip3 location: $(which pip3)"
    echo "pip3 version: $(pip3 --version 2>&1)"
    
    # Check if we're using the target version
    if python3 --version 2>&1 | grep -q "{{ python_version_management.target_version }}"; then
      echo "‚úÖ SUCCESS: Using target Python {{ python_version_management.target_version }}"
      exit 0
    else
      echo "‚ö†Ô∏è  WARNING: Not using target Python version"
      exit 1
    fi
  register: path_verification
  failed_when: false
  changed_when: false

- name: Create PATH configuration summary
  copy:
    content: |
      PATH Configuration Update Summary
      ================================
      Date: {{ ansible_date_time.iso8601 }}
      Target Python Version: {{ python_version_management.target_version }}
      
      SHELL CONFIGURATIONS UPDATED:
      {% for config_stat in shell_config_stats.results %}
      {% if config_stat.stat.exists %}
      ‚úÖ {{ config_stat.item }}
      {% else %}
      ‚è≠Ô∏è  {{ config_stat.item }} (not found)
      {% endif %}
      {% endfor %}
      
      PATH VERIFICATION RESULTS:
      {{ path_verification.stdout }}
      
      VERIFICATION STATUS:
      {% if path_verification.rc == 0 %}
      ‚úÖ SUCCESS: PATH correctly configured for Python {{ python_version_management.target_version }}
      {% else %}
      ‚ö†Ô∏è  WARNING: PATH configuration may need manual adjustment
      {% endif %}
      
      NEXT STEPS:
      1. Restart your terminal or run: source ~/.zshrc (or ~/.bashrc)
      2. Run verification script: ~/.dotsible/python_migration/verify_environment.sh
      3. Test Python functionality: python3 --version && pip3 --version
      
    dest: "{{ ansible_user_dir }}/.dotsible/python_migration/path_configuration_summary.txt"
    mode: '0644'

- name: Display PATH configuration results
  debug:
    msg: |
      üõ§Ô∏è  PATH Configuration Update Complete:
      ‚Ä¢ Shell configs updated: {{ shell_config_stats.results | selectattr('stat.exists') | list | length }}
      ‚Ä¢ PATH verification: {{ 'SUCCESS' if path_verification.rc == 0 else 'WARNING' }}
      ‚Ä¢ Target version active: {{ 'YES' if path_verification.rc == 0 else 'NEEDS_VERIFICATION' }}
      ‚Ä¢ Configuration summary: ~/.dotsible/python_migration/path_configuration_summary.txt
      ‚Ä¢ Verification script: ~/.dotsible/python_migration/verify_environment.sh
      
      üí° To activate changes immediately:
      {% for config_file in shell_configs %}
      source {{ config_file }}
      {% endfor %}
